# coding: utf-8

"""
    Reepay Checkout API

    Reepay Checkout REST API  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CreditInvoice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'credit': 'str',
        'amount': 'int',
        'created': 'datetime'
    }

    attribute_map = {
        'credit': 'credit',
        'amount': 'amount',
        'created': 'created'
    }

    def __init__(self, credit=None, amount=None, created=None):  # noqa: E501
        """CreditInvoice - a model defined in Swagger"""  # noqa: E501

        self._credit = None
        self._amount = None
        self._created = None
        self.discriminator = None

        self.credit = credit
        self.amount = amount
        self.created = created

    @property
    def credit(self):
        """Gets the credit of this CreditInvoice.  # noqa: E501

        Credit handle  # noqa: E501

        :return: The credit of this CreditInvoice.  # noqa: E501
        :rtype: str
        """
        return self._credit

    @credit.setter
    def credit(self, credit):
        """Sets the credit of this CreditInvoice.

        Credit handle  # noqa: E501

        :param credit: The credit of this CreditInvoice.  # noqa: E501
        :type: str
        """
        if credit is None:
            raise ValueError("Invalid value for `credit`, must not be `None`")  # noqa: E501

        self._credit = credit

    @property
    def amount(self):
        """Gets the amount of this CreditInvoice.  # noqa: E501

        The credit amount transferred to invoice  # noqa: E501

        :return: The amount of this CreditInvoice.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreditInvoice.

        The credit amount transferred to invoice  # noqa: E501

        :param amount: The amount of this CreditInvoice.  # noqa: E501
        :type: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501
        if amount < 0:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `0`")  # noqa: E501

        self._amount = amount

    @property
    def created(self):
        """Gets the created of this CreditInvoice.  # noqa: E501

        Date when credit was transferred to invoice. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :return: The created of this CreditInvoice.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this CreditInvoice.

        Date when credit was transferred to invoice. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :param created: The created of this CreditInvoice.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreditInvoice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        return (
            self.__dict__ == other.__dict__
            if isinstance(other, CreditInvoice)
            else False
        )

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
