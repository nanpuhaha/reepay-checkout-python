# coding: utf-8

"""
    Reepay Checkout API

    Reepay Checkout REST API  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CheckoutSession(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'result': 'str',
        'error_code': 'int',
        'error_message': 'str',
        'logo': 'str',
        'configuration': 'str',
        'locale': 'str',
        'cancel_url': 'str',
        'accept_url': 'str',
        'payment_methods': 'SessionPaymentMethods',
        'subscription_invoice': 'Invoice',
        'account': 'Account',
        'charge': 'Charge',
        'customer': 'Customer',
        'subscription': 'Subscription',
        'plan': 'Plan',
        'add_ons': 'list[SubscriptionAddOn]',
        'discounts': 'list[SubscriptionDiscount]',
        'subscription_payment_methods': 'PaymentMethods',
        'recurring': 'bool',
        'settle': 'bool',
        'pkey': 'str',
        'strong_auth': 'StrongAuth',
        'payment_method': 'str',
        'pgw_url': 'str',
        'mpo_url': 'str',
        'mpo_session_token': 'str',
        'mpo_version': 'str',
        'viabill_url': 'str',
        'resurs_url': 'str',
        'applepay_payment_request': 'ApplepayPaymentRequestDto',
        'googlepay_payment_request': 'GooglepayPaymentRequestDto',
        'paypal_client_id': 'str',
        'paypal_payment_request': 'dict(str, object)',
        'paypal_auth_url': 'str',
        'button_text': 'str',
        'show_subscription_details': 'bool',
        'show_terms': 'bool',
        'card_on_file': 'CardOnFile'
    }

    attribute_map = {
        'id': 'id',
        'type': 'type',
        'result': 'result',
        'error_code': 'errorCode',
        'error_message': 'errorMessage',
        'logo': 'logo',
        'configuration': 'configuration',
        'locale': 'locale',
        'cancel_url': 'cancelUrl',
        'accept_url': 'acceptUrl',
        'payment_methods': 'paymentMethods',
        'subscription_invoice': 'subscriptionInvoice',
        'account': 'account',
        'charge': 'charge',
        'customer': 'customer',
        'subscription': 'subscription',
        'plan': 'plan',
        'add_ons': 'addOns',
        'discounts': 'discounts',
        'subscription_payment_methods': 'subscriptionPaymentMethods',
        'recurring': 'recurring',
        'settle': 'settle',
        'pkey': 'pkey',
        'strong_auth': 'strongAuth',
        'payment_method': 'paymentMethod',
        'pgw_url': 'pgwUrl',
        'mpo_url': 'mpoUrl',
        'mpo_session_token': 'mpoSessionToken',
        'mpo_version': 'mpoVersion',
        'viabill_url': 'viabillUrl',
        'resurs_url': 'resursUrl',
        'applepay_payment_request': 'applepayPaymentRequest',
        'googlepay_payment_request': 'googlepayPaymentRequest',
        'paypal_client_id': 'paypalClientId',
        'paypal_payment_request': 'paypalPaymentRequest',
        'paypal_auth_url': 'paypalAuthUrl',
        'button_text': 'buttonText',
        'show_subscription_details': 'showSubscriptionDetails',
        'show_terms': 'showTerms',
        'card_on_file': 'cardOnFile'
    }

    def __init__(self, id=None, type=None, result=None, error_code=None, error_message=None, logo=None, configuration=None, locale=None, cancel_url=None, accept_url=None, payment_methods=None, subscription_invoice=None, account=None, charge=None, customer=None, subscription=None, plan=None, add_ons=None, discounts=None, subscription_payment_methods=None, recurring=None, settle=None, pkey=None, strong_auth=None, payment_method=None, pgw_url=None, mpo_url=None, mpo_session_token=None, mpo_version=None, viabill_url=None, resurs_url=None, applepay_payment_request=None, googlepay_payment_request=None, paypal_client_id=None, paypal_payment_request=None, paypal_auth_url=None, button_text=None, show_subscription_details=None, show_terms=None, card_on_file=None):  # noqa: E501
        """CheckoutSession - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._type = None
        self._result = None
        self._error_code = None
        self._error_message = None
        self._logo = None
        self._configuration = None
        self._locale = None
        self._cancel_url = None
        self._accept_url = None
        self._payment_methods = None
        self._subscription_invoice = None
        self._account = None
        self._charge = None
        self._customer = None
        self._subscription = None
        self._plan = None
        self._add_ons = None
        self._discounts = None
        self._subscription_payment_methods = None
        self._recurring = None
        self._settle = None
        self._pkey = None
        self._strong_auth = None
        self._payment_method = None
        self._pgw_url = None
        self._mpo_url = None
        self._mpo_session_token = None
        self._mpo_version = None
        self._viabill_url = None
        self._resurs_url = None
        self._applepay_payment_request = None
        self._googlepay_payment_request = None
        self._paypal_client_id = None
        self._paypal_payment_request = None
        self._paypal_auth_url = None
        self._button_text = None
        self._show_subscription_details = None
        self._show_terms = None
        self._card_on_file = None
        self.discriminator = None

        self.id = id
        self.type = type
        if result is not None:
            self.result = result
        if error_code is not None:
            self.error_code = error_code
        if error_message is not None:
            self.error_message = error_message
        if logo is not None:
            self.logo = logo
        if configuration is not None:
            self.configuration = configuration
        self.locale = locale
        if cancel_url is not None:
            self.cancel_url = cancel_url
        if accept_url is not None:
            self.accept_url = accept_url
        if payment_methods is not None:
            self.payment_methods = payment_methods
        if subscription_invoice is not None:
            self.subscription_invoice = subscription_invoice
        if account is not None:
            self.account = account
        if charge is not None:
            self.charge = charge
        if customer is not None:
            self.customer = customer
        if subscription is not None:
            self.subscription = subscription
        if plan is not None:
            self.plan = plan
        if add_ons is not None:
            self.add_ons = add_ons
        if discounts is not None:
            self.discounts = discounts
        if subscription_payment_methods is not None:
            self.subscription_payment_methods = subscription_payment_methods
        if recurring is not None:
            self.recurring = recurring
        if settle is not None:
            self.settle = settle
        if pkey is not None:
            self.pkey = pkey
        if strong_auth is not None:
            self.strong_auth = strong_auth
        if payment_method is not None:
            self.payment_method = payment_method
        if pgw_url is not None:
            self.pgw_url = pgw_url
        if mpo_url is not None:
            self.mpo_url = mpo_url
        if mpo_session_token is not None:
            self.mpo_session_token = mpo_session_token
        if mpo_version is not None:
            self.mpo_version = mpo_version
        if viabill_url is not None:
            self.viabill_url = viabill_url
        if resurs_url is not None:
            self.resurs_url = resurs_url
        if applepay_payment_request is not None:
            self.applepay_payment_request = applepay_payment_request
        if googlepay_payment_request is not None:
            self.googlepay_payment_request = googlepay_payment_request
        if paypal_client_id is not None:
            self.paypal_client_id = paypal_client_id
        if paypal_payment_request is not None:
            self.paypal_payment_request = paypal_payment_request
        if paypal_auth_url is not None:
            self.paypal_auth_url = paypal_auth_url
        if button_text is not None:
            self.button_text = button_text
        if show_subscription_details is not None:
            self.show_subscription_details = show_subscription_details
        if show_terms is not None:
            self.show_terms = show_terms
        if card_on_file is not None:
            self.card_on_file = card_on_file

    @property
    def id(self):
        """Gets the id of this CheckoutSession.  # noqa: E501

        Session id  # noqa: E501

        :return: The id of this CheckoutSession.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CheckoutSession.

        Session id  # noqa: E501

        :param id: The id of this CheckoutSession.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def type(self):
        """Gets the type of this CheckoutSession.  # noqa: E501

        Session type  # noqa: E501

        :return: The type of this CheckoutSession.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CheckoutSession.

        Session type  # noqa: E501

        :param type: The type of this CheckoutSession.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["CHARGE", "RECURRING", "SUBSCRIPTION", "SUBSCRIPTION_CHARGE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def result(self):
        """Gets the result of this CheckoutSession.  # noqa: E501


        :return: The result of this CheckoutSession.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this CheckoutSession.


        :param result: The result of this CheckoutSession.  # noqa: E501
        :type: str
        """
        allowed_values = ["SUCCESS", "SESSION_DELETED", "SESSION_EXPIRED", "CHARGE_FAILURE", "CHARGE_CARD_TOKEN_EXPIRED", "NO_PAYMENT_METHODS", "REEPAY_ERROR", "CAPACITY_ERROR", "INTERNAL_ERROR", "INVOICE_ALREADY_PAID", "INVOICE_CANCELLED", "PAYMENT_METHOD_ALREADY_ADDED"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"  # noqa: E501
                .format(result, allowed_values)
            )

        self._result = result

    @property
    def error_code(self):
        """Gets the error_code of this CheckoutSession.  # noqa: E501


        :return: The error_code of this CheckoutSession.  # noqa: E501
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this CheckoutSession.


        :param error_code: The error_code of this CheckoutSession.  # noqa: E501
        :type: int
        """

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this CheckoutSession.  # noqa: E501


        :return: The error_message of this CheckoutSession.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this CheckoutSession.


        :param error_message: The error_message of this CheckoutSession.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def logo(self):
        """Gets the logo of this CheckoutSession.  # noqa: E501


        :return: The logo of this CheckoutSession.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this CheckoutSession.


        :param logo: The logo of this CheckoutSession.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def configuration(self):
        """Gets the configuration of this CheckoutSession.  # noqa: E501


        :return: The configuration of this CheckoutSession.  # noqa: E501
        :rtype: str
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this CheckoutSession.


        :param configuration: The configuration of this CheckoutSession.  # noqa: E501
        :type: str
        """

        self._configuration = configuration

    @property
    def locale(self):
        """Gets the locale of this CheckoutSession.  # noqa: E501

        Session locale  # noqa: E501

        :return: The locale of this CheckoutSession.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this CheckoutSession.

        Session locale  # noqa: E501

        :param locale: The locale of this CheckoutSession.  # noqa: E501
        :type: str
        """
        if locale is None:
            raise ValueError("Invalid value for `locale`, must not be `None`")  # noqa: E501

        self._locale = locale

    @property
    def cancel_url(self):
        """Gets the cancel_url of this CheckoutSession.  # noqa: E501


        :return: The cancel_url of this CheckoutSession.  # noqa: E501
        :rtype: str
        """
        return self._cancel_url

    @cancel_url.setter
    def cancel_url(self, cancel_url):
        """Sets the cancel_url of this CheckoutSession.


        :param cancel_url: The cancel_url of this CheckoutSession.  # noqa: E501
        :type: str
        """

        self._cancel_url = cancel_url

    @property
    def accept_url(self):
        """Gets the accept_url of this CheckoutSession.  # noqa: E501


        :return: The accept_url of this CheckoutSession.  # noqa: E501
        :rtype: str
        """
        return self._accept_url

    @accept_url.setter
    def accept_url(self, accept_url):
        """Sets the accept_url of this CheckoutSession.


        :param accept_url: The accept_url of this CheckoutSession.  # noqa: E501
        :type: str
        """

        self._accept_url = accept_url

    @property
    def payment_methods(self):
        """Gets the payment_methods of this CheckoutSession.  # noqa: E501


        :return: The payment_methods of this CheckoutSession.  # noqa: E501
        :rtype: SessionPaymentMethods
        """
        return self._payment_methods

    @payment_methods.setter
    def payment_methods(self, payment_methods):
        """Sets the payment_methods of this CheckoutSession.


        :param payment_methods: The payment_methods of this CheckoutSession.  # noqa: E501
        :type: SessionPaymentMethods
        """

        self._payment_methods = payment_methods

    @property
    def subscription_invoice(self):
        """Gets the subscription_invoice of this CheckoutSession.  # noqa: E501


        :return: The subscription_invoice of this CheckoutSession.  # noqa: E501
        :rtype: Invoice
        """
        return self._subscription_invoice

    @subscription_invoice.setter
    def subscription_invoice(self, subscription_invoice):
        """Sets the subscription_invoice of this CheckoutSession.


        :param subscription_invoice: The subscription_invoice of this CheckoutSession.  # noqa: E501
        :type: Invoice
        """

        self._subscription_invoice = subscription_invoice

    @property
    def account(self):
        """Gets the account of this CheckoutSession.  # noqa: E501


        :return: The account of this CheckoutSession.  # noqa: E501
        :rtype: Account
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this CheckoutSession.


        :param account: The account of this CheckoutSession.  # noqa: E501
        :type: Account
        """

        self._account = account

    @property
    def charge(self):
        """Gets the charge of this CheckoutSession.  # noqa: E501


        :return: The charge of this CheckoutSession.  # noqa: E501
        :rtype: Charge
        """
        return self._charge

    @charge.setter
    def charge(self, charge):
        """Sets the charge of this CheckoutSession.


        :param charge: The charge of this CheckoutSession.  # noqa: E501
        :type: Charge
        """

        self._charge = charge

    @property
    def customer(self):
        """Gets the customer of this CheckoutSession.  # noqa: E501


        :return: The customer of this CheckoutSession.  # noqa: E501
        :rtype: Customer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this CheckoutSession.


        :param customer: The customer of this CheckoutSession.  # noqa: E501
        :type: Customer
        """

        self._customer = customer

    @property
    def subscription(self):
        """Gets the subscription of this CheckoutSession.  # noqa: E501


        :return: The subscription of this CheckoutSession.  # noqa: E501
        :rtype: Subscription
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this CheckoutSession.


        :param subscription: The subscription of this CheckoutSession.  # noqa: E501
        :type: Subscription
        """

        self._subscription = subscription

    @property
    def plan(self):
        """Gets the plan of this CheckoutSession.  # noqa: E501


        :return: The plan of this CheckoutSession.  # noqa: E501
        :rtype: Plan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this CheckoutSession.


        :param plan: The plan of this CheckoutSession.  # noqa: E501
        :type: Plan
        """

        self._plan = plan

    @property
    def add_ons(self):
        """Gets the add_ons of this CheckoutSession.  # noqa: E501


        :return: The add_ons of this CheckoutSession.  # noqa: E501
        :rtype: list[SubscriptionAddOn]
        """
        return self._add_ons

    @add_ons.setter
    def add_ons(self, add_ons):
        """Sets the add_ons of this CheckoutSession.


        :param add_ons: The add_ons of this CheckoutSession.  # noqa: E501
        :type: list[SubscriptionAddOn]
        """

        self._add_ons = add_ons

    @property
    def discounts(self):
        """Gets the discounts of this CheckoutSession.  # noqa: E501


        :return: The discounts of this CheckoutSession.  # noqa: E501
        :rtype: list[SubscriptionDiscount]
        """
        return self._discounts

    @discounts.setter
    def discounts(self, discounts):
        """Sets the discounts of this CheckoutSession.


        :param discounts: The discounts of this CheckoutSession.  # noqa: E501
        :type: list[SubscriptionDiscount]
        """

        self._discounts = discounts

    @property
    def subscription_payment_methods(self):
        """Gets the subscription_payment_methods of this CheckoutSession.  # noqa: E501


        :return: The subscription_payment_methods of this CheckoutSession.  # noqa: E501
        :rtype: PaymentMethods
        """
        return self._subscription_payment_methods

    @subscription_payment_methods.setter
    def subscription_payment_methods(self, subscription_payment_methods):
        """Sets the subscription_payment_methods of this CheckoutSession.


        :param subscription_payment_methods: The subscription_payment_methods of this CheckoutSession.  # noqa: E501
        :type: PaymentMethods
        """

        self._subscription_payment_methods = subscription_payment_methods

    @property
    def recurring(self):
        """Gets the recurring of this CheckoutSession.  # noqa: E501


        :return: The recurring of this CheckoutSession.  # noqa: E501
        :rtype: bool
        """
        return self._recurring

    @recurring.setter
    def recurring(self, recurring):
        """Sets the recurring of this CheckoutSession.


        :param recurring: The recurring of this CheckoutSession.  # noqa: E501
        :type: bool
        """

        self._recurring = recurring

    @property
    def settle(self):
        """Gets the settle of this CheckoutSession.  # noqa: E501


        :return: The settle of this CheckoutSession.  # noqa: E501
        :rtype: bool
        """
        return self._settle

    @settle.setter
    def settle(self, settle):
        """Sets the settle of this CheckoutSession.


        :param settle: The settle of this CheckoutSession.  # noqa: E501
        :type: bool
        """

        self._settle = settle

    @property
    def pkey(self):
        """Gets the pkey of this CheckoutSession.  # noqa: E501


        :return: The pkey of this CheckoutSession.  # noqa: E501
        :rtype: str
        """
        return self._pkey

    @pkey.setter
    def pkey(self, pkey):
        """Sets the pkey of this CheckoutSession.


        :param pkey: The pkey of this CheckoutSession.  # noqa: E501
        :type: str
        """

        self._pkey = pkey

    @property
    def strong_auth(self):
        """Gets the strong_auth of this CheckoutSession.  # noqa: E501


        :return: The strong_auth of this CheckoutSession.  # noqa: E501
        :rtype: StrongAuth
        """
        return self._strong_auth

    @strong_auth.setter
    def strong_auth(self, strong_auth):
        """Sets the strong_auth of this CheckoutSession.


        :param strong_auth: The strong_auth of this CheckoutSession.  # noqa: E501
        :type: StrongAuth
        """

        self._strong_auth = strong_auth

    @property
    def payment_method(self):
        """Gets the payment_method of this CheckoutSession.  # noqa: E501


        :return: The payment_method of this CheckoutSession.  # noqa: E501
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this CheckoutSession.


        :param payment_method: The payment_method of this CheckoutSession.  # noqa: E501
        :type: str
        """

        self._payment_method = payment_method

    @property
    def pgw_url(self):
        """Gets the pgw_url of this CheckoutSession.  # noqa: E501


        :return: The pgw_url of this CheckoutSession.  # noqa: E501
        :rtype: str
        """
        return self._pgw_url

    @pgw_url.setter
    def pgw_url(self, pgw_url):
        """Sets the pgw_url of this CheckoutSession.


        :param pgw_url: The pgw_url of this CheckoutSession.  # noqa: E501
        :type: str
        """

        self._pgw_url = pgw_url

    @property
    def mpo_url(self):
        """Gets the mpo_url of this CheckoutSession.  # noqa: E501


        :return: The mpo_url of this CheckoutSession.  # noqa: E501
        :rtype: str
        """
        return self._mpo_url

    @mpo_url.setter
    def mpo_url(self, mpo_url):
        """Sets the mpo_url of this CheckoutSession.


        :param mpo_url: The mpo_url of this CheckoutSession.  # noqa: E501
        :type: str
        """

        self._mpo_url = mpo_url

    @property
    def mpo_session_token(self):
        """Gets the mpo_session_token of this CheckoutSession.  # noqa: E501


        :return: The mpo_session_token of this CheckoutSession.  # noqa: E501
        :rtype: str
        """
        return self._mpo_session_token

    @mpo_session_token.setter
    def mpo_session_token(self, mpo_session_token):
        """Sets the mpo_session_token of this CheckoutSession.


        :param mpo_session_token: The mpo_session_token of this CheckoutSession.  # noqa: E501
        :type: str
        """

        self._mpo_session_token = mpo_session_token

    @property
    def mpo_version(self):
        """Gets the mpo_version of this CheckoutSession.  # noqa: E501


        :return: The mpo_version of this CheckoutSession.  # noqa: E501
        :rtype: str
        """
        return self._mpo_version

    @mpo_version.setter
    def mpo_version(self, mpo_version):
        """Sets the mpo_version of this CheckoutSession.


        :param mpo_version: The mpo_version of this CheckoutSession.  # noqa: E501
        :type: str
        """

        self._mpo_version = mpo_version

    @property
    def viabill_url(self):
        """Gets the viabill_url of this CheckoutSession.  # noqa: E501


        :return: The viabill_url of this CheckoutSession.  # noqa: E501
        :rtype: str
        """
        return self._viabill_url

    @viabill_url.setter
    def viabill_url(self, viabill_url):
        """Sets the viabill_url of this CheckoutSession.


        :param viabill_url: The viabill_url of this CheckoutSession.  # noqa: E501
        :type: str
        """

        self._viabill_url = viabill_url

    @property
    def resurs_url(self):
        """Gets the resurs_url of this CheckoutSession.  # noqa: E501


        :return: The resurs_url of this CheckoutSession.  # noqa: E501
        :rtype: str
        """
        return self._resurs_url

    @resurs_url.setter
    def resurs_url(self, resurs_url):
        """Sets the resurs_url of this CheckoutSession.


        :param resurs_url: The resurs_url of this CheckoutSession.  # noqa: E501
        :type: str
        """

        self._resurs_url = resurs_url

    @property
    def applepay_payment_request(self):
        """Gets the applepay_payment_request of this CheckoutSession.  # noqa: E501


        :return: The applepay_payment_request of this CheckoutSession.  # noqa: E501
        :rtype: ApplepayPaymentRequestDto
        """
        return self._applepay_payment_request

    @applepay_payment_request.setter
    def applepay_payment_request(self, applepay_payment_request):
        """Sets the applepay_payment_request of this CheckoutSession.


        :param applepay_payment_request: The applepay_payment_request of this CheckoutSession.  # noqa: E501
        :type: ApplepayPaymentRequestDto
        """

        self._applepay_payment_request = applepay_payment_request

    @property
    def googlepay_payment_request(self):
        """Gets the googlepay_payment_request of this CheckoutSession.  # noqa: E501


        :return: The googlepay_payment_request of this CheckoutSession.  # noqa: E501
        :rtype: GooglepayPaymentRequestDto
        """
        return self._googlepay_payment_request

    @googlepay_payment_request.setter
    def googlepay_payment_request(self, googlepay_payment_request):
        """Sets the googlepay_payment_request of this CheckoutSession.


        :param googlepay_payment_request: The googlepay_payment_request of this CheckoutSession.  # noqa: E501
        :type: GooglepayPaymentRequestDto
        """

        self._googlepay_payment_request = googlepay_payment_request

    @property
    def paypal_client_id(self):
        """Gets the paypal_client_id of this CheckoutSession.  # noqa: E501


        :return: The paypal_client_id of this CheckoutSession.  # noqa: E501
        :rtype: str
        """
        return self._paypal_client_id

    @paypal_client_id.setter
    def paypal_client_id(self, paypal_client_id):
        """Sets the paypal_client_id of this CheckoutSession.


        :param paypal_client_id: The paypal_client_id of this CheckoutSession.  # noqa: E501
        :type: str
        """

        self._paypal_client_id = paypal_client_id

    @property
    def paypal_payment_request(self):
        """Gets the paypal_payment_request of this CheckoutSession.  # noqa: E501


        :return: The paypal_payment_request of this CheckoutSession.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._paypal_payment_request

    @paypal_payment_request.setter
    def paypal_payment_request(self, paypal_payment_request):
        """Sets the paypal_payment_request of this CheckoutSession.


        :param paypal_payment_request: The paypal_payment_request of this CheckoutSession.  # noqa: E501
        :type: dict(str, object)
        """

        self._paypal_payment_request = paypal_payment_request

    @property
    def paypal_auth_url(self):
        """Gets the paypal_auth_url of this CheckoutSession.  # noqa: E501


        :return: The paypal_auth_url of this CheckoutSession.  # noqa: E501
        :rtype: str
        """
        return self._paypal_auth_url

    @paypal_auth_url.setter
    def paypal_auth_url(self, paypal_auth_url):
        """Sets the paypal_auth_url of this CheckoutSession.


        :param paypal_auth_url: The paypal_auth_url of this CheckoutSession.  # noqa: E501
        :type: str
        """

        self._paypal_auth_url = paypal_auth_url

    @property
    def button_text(self):
        """Gets the button_text of this CheckoutSession.  # noqa: E501


        :return: The button_text of this CheckoutSession.  # noqa: E501
        :rtype: str
        """
        return self._button_text

    @button_text.setter
    def button_text(self, button_text):
        """Sets the button_text of this CheckoutSession.


        :param button_text: The button_text of this CheckoutSession.  # noqa: E501
        :type: str
        """

        self._button_text = button_text

    @property
    def show_subscription_details(self):
        """Gets the show_subscription_details of this CheckoutSession.  # noqa: E501


        :return: The show_subscription_details of this CheckoutSession.  # noqa: E501
        :rtype: bool
        """
        return self._show_subscription_details

    @show_subscription_details.setter
    def show_subscription_details(self, show_subscription_details):
        """Sets the show_subscription_details of this CheckoutSession.


        :param show_subscription_details: The show_subscription_details of this CheckoutSession.  # noqa: E501
        :type: bool
        """

        self._show_subscription_details = show_subscription_details

    @property
    def show_terms(self):
        """Gets the show_terms of this CheckoutSession.  # noqa: E501


        :return: The show_terms of this CheckoutSession.  # noqa: E501
        :rtype: bool
        """
        return self._show_terms

    @show_terms.setter
    def show_terms(self, show_terms):
        """Sets the show_terms of this CheckoutSession.


        :param show_terms: The show_terms of this CheckoutSession.  # noqa: E501
        :type: bool
        """

        self._show_terms = show_terms

    @property
    def card_on_file(self):
        """Gets the card_on_file of this CheckoutSession.  # noqa: E501


        :return: The card_on_file of this CheckoutSession.  # noqa: E501
        :rtype: CardOnFile
        """
        return self._card_on_file

    @card_on_file.setter
    def card_on_file(self, card_on_file):
        """Sets the card_on_file of this CheckoutSession.


        :param card_on_file: The card_on_file of this CheckoutSession.  # noqa: E501
        :type: CardOnFile
        """

        self._card_on_file = card_on_file

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CheckoutSession, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CheckoutSession):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
