# coding: utf-8

"""
    Reepay Checkout API

    Reepay Checkout REST API  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SignupPageSignup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account': 'Account',
        'subscription': 'PreparedSubscription',
        'locale': 'str',
        'cancel_url': 'str',
        'accept_url': 'str',
        'plan': 'Plan',
        'discounts': 'list[Discount]',
        'add_ons': 'list[AddOn]',
        'email': 'str',
        'phone': 'str',
        'address': 'str',
        'company': 'str',
        'city': 'str',
        'coupon': 'str',
        'amount': 'int',
        'quantity': 'int',
        'subscription_configuration': 'CreateSubscription',
        'first_name': 'str',
        'last_name': 'str',
        'postal_code': 'str',
        'amount_incl_vat': 'bool'
    }

    attribute_map = {
        'account': 'account',
        'subscription': 'subscription',
        'locale': 'locale',
        'cancel_url': 'cancelUrl',
        'accept_url': 'acceptUrl',
        'plan': 'plan',
        'discounts': 'discounts',
        'add_ons': 'addOns',
        'email': 'email',
        'phone': 'phone',
        'address': 'address',
        'company': 'company',
        'city': 'city',
        'coupon': 'coupon',
        'amount': 'amount',
        'quantity': 'quantity',
        'subscription_configuration': 'subscription_configuration',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'postal_code': 'postal_code',
        'amount_incl_vat': 'amount_incl_vat'
    }

    def __init__(self, account=None, subscription=None, locale=None, cancel_url=None, accept_url=None, plan=None, discounts=None, add_ons=None, email=None, phone=None, address=None, company=None, city=None, coupon=None, amount=None, quantity=None, subscription_configuration=None, first_name=None, last_name=None, postal_code=None, amount_incl_vat=None):  # noqa: E501
        """SignupPageSignup - a model defined in Swagger"""  # noqa: E501

        self._account = None
        self._subscription = None
        self._locale = None
        self._cancel_url = None
        self._accept_url = None
        self._plan = None
        self._discounts = None
        self._add_ons = None
        self._email = None
        self._phone = None
        self._address = None
        self._company = None
        self._city = None
        self._coupon = None
        self._amount = None
        self._quantity = None
        self._subscription_configuration = None
        self._first_name = None
        self._last_name = None
        self._postal_code = None
        self._amount_incl_vat = None
        self.discriminator = None

        if account is not None:
            self.account = account
        if subscription is not None:
            self.subscription = subscription
        if locale is not None:
            self.locale = locale
        if cancel_url is not None:
            self.cancel_url = cancel_url
        if accept_url is not None:
            self.accept_url = accept_url
        if plan is not None:
            self.plan = plan
        if discounts is not None:
            self.discounts = discounts
        if add_ons is not None:
            self.add_ons = add_ons
        if email is not None:
            self.email = email
        if phone is not None:
            self.phone = phone
        if address is not None:
            self.address = address
        if company is not None:
            self.company = company
        if city is not None:
            self.city = city
        if coupon is not None:
            self.coupon = coupon
        if amount is not None:
            self.amount = amount
        if quantity is not None:
            self.quantity = quantity
        if subscription_configuration is not None:
            self.subscription_configuration = subscription_configuration
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if postal_code is not None:
            self.postal_code = postal_code
        if amount_incl_vat is not None:
            self.amount_incl_vat = amount_incl_vat

    @property
    def account(self):
        """Gets the account of this SignupPageSignup.  # noqa: E501


        :return: The account of this SignupPageSignup.  # noqa: E501
        :rtype: Account
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this SignupPageSignup.


        :param account: The account of this SignupPageSignup.  # noqa: E501
        :type: Account
        """

        self._account = account

    @property
    def subscription(self):
        """Gets the subscription of this SignupPageSignup.  # noqa: E501


        :return: The subscription of this SignupPageSignup.  # noqa: E501
        :rtype: PreparedSubscription
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this SignupPageSignup.


        :param subscription: The subscription of this SignupPageSignup.  # noqa: E501
        :type: PreparedSubscription
        """

        self._subscription = subscription

    @property
    def locale(self):
        """Gets the locale of this SignupPageSignup.  # noqa: E501


        :return: The locale of this SignupPageSignup.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this SignupPageSignup.


        :param locale: The locale of this SignupPageSignup.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def cancel_url(self):
        """Gets the cancel_url of this SignupPageSignup.  # noqa: E501


        :return: The cancel_url of this SignupPageSignup.  # noqa: E501
        :rtype: str
        """
        return self._cancel_url

    @cancel_url.setter
    def cancel_url(self, cancel_url):
        """Sets the cancel_url of this SignupPageSignup.


        :param cancel_url: The cancel_url of this SignupPageSignup.  # noqa: E501
        :type: str
        """

        self._cancel_url = cancel_url

    @property
    def accept_url(self):
        """Gets the accept_url of this SignupPageSignup.  # noqa: E501


        :return: The accept_url of this SignupPageSignup.  # noqa: E501
        :rtype: str
        """
        return self._accept_url

    @accept_url.setter
    def accept_url(self, accept_url):
        """Sets the accept_url of this SignupPageSignup.


        :param accept_url: The accept_url of this SignupPageSignup.  # noqa: E501
        :type: str
        """

        self._accept_url = accept_url

    @property
    def plan(self):
        """Gets the plan of this SignupPageSignup.  # noqa: E501


        :return: The plan of this SignupPageSignup.  # noqa: E501
        :rtype: Plan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this SignupPageSignup.


        :param plan: The plan of this SignupPageSignup.  # noqa: E501
        :type: Plan
        """

        self._plan = plan

    @property
    def discounts(self):
        """Gets the discounts of this SignupPageSignup.  # noqa: E501


        :return: The discounts of this SignupPageSignup.  # noqa: E501
        :rtype: list[Discount]
        """
        return self._discounts

    @discounts.setter
    def discounts(self, discounts):
        """Sets the discounts of this SignupPageSignup.


        :param discounts: The discounts of this SignupPageSignup.  # noqa: E501
        :type: list[Discount]
        """

        self._discounts = discounts

    @property
    def add_ons(self):
        """Gets the add_ons of this SignupPageSignup.  # noqa: E501


        :return: The add_ons of this SignupPageSignup.  # noqa: E501
        :rtype: list[AddOn]
        """
        return self._add_ons

    @add_ons.setter
    def add_ons(self, add_ons):
        """Sets the add_ons of this SignupPageSignup.


        :param add_ons: The add_ons of this SignupPageSignup.  # noqa: E501
        :type: list[AddOn]
        """

        self._add_ons = add_ons

    @property
    def email(self):
        """Gets the email of this SignupPageSignup.  # noqa: E501


        :return: The email of this SignupPageSignup.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SignupPageSignup.


        :param email: The email of this SignupPageSignup.  # noqa: E501
        :type: str
        """
        allowed_values = ["HIDDEN", "OPTIONAL", "MANDATORY"]  # noqa: E501
        if email not in allowed_values:
            raise ValueError(
                "Invalid value for `email` ({0}), must be one of {1}"  # noqa: E501
                .format(email, allowed_values)
            )

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this SignupPageSignup.  # noqa: E501


        :return: The phone of this SignupPageSignup.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this SignupPageSignup.


        :param phone: The phone of this SignupPageSignup.  # noqa: E501
        :type: str
        """
        allowed_values = ["HIDDEN", "OPTIONAL", "MANDATORY"]  # noqa: E501
        if phone not in allowed_values:
            raise ValueError(
                "Invalid value for `phone` ({0}), must be one of {1}"  # noqa: E501
                .format(phone, allowed_values)
            )

        self._phone = phone

    @property
    def address(self):
        """Gets the address of this SignupPageSignup.  # noqa: E501


        :return: The address of this SignupPageSignup.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this SignupPageSignup.


        :param address: The address of this SignupPageSignup.  # noqa: E501
        :type: str
        """
        allowed_values = ["HIDDEN", "OPTIONAL", "MANDATORY"]  # noqa: E501
        if address not in allowed_values:
            raise ValueError(
                "Invalid value for `address` ({0}), must be one of {1}"  # noqa: E501
                .format(address, allowed_values)
            )

        self._address = address

    @property
    def company(self):
        """Gets the company of this SignupPageSignup.  # noqa: E501


        :return: The company of this SignupPageSignup.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this SignupPageSignup.


        :param company: The company of this SignupPageSignup.  # noqa: E501
        :type: str
        """
        allowed_values = ["HIDDEN", "OPTIONAL", "MANDATORY"]  # noqa: E501
        if company not in allowed_values:
            raise ValueError(
                "Invalid value for `company` ({0}), must be one of {1}"  # noqa: E501
                .format(company, allowed_values)
            )

        self._company = company

    @property
    def city(self):
        """Gets the city of this SignupPageSignup.  # noqa: E501


        :return: The city of this SignupPageSignup.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this SignupPageSignup.


        :param city: The city of this SignupPageSignup.  # noqa: E501
        :type: str
        """
        allowed_values = ["HIDDEN", "OPTIONAL", "MANDATORY"]  # noqa: E501
        if city not in allowed_values:
            raise ValueError(
                "Invalid value for `city` ({0}), must be one of {1}"  # noqa: E501
                .format(city, allowed_values)
            )

        self._city = city

    @property
    def coupon(self):
        """Gets the coupon of this SignupPageSignup.  # noqa: E501


        :return: The coupon of this SignupPageSignup.  # noqa: E501
        :rtype: str
        """
        return self._coupon

    @coupon.setter
    def coupon(self, coupon):
        """Sets the coupon of this SignupPageSignup.


        :param coupon: The coupon of this SignupPageSignup.  # noqa: E501
        :type: str
        """
        allowed_values = ["HIDDEN", "OPTIONAL", "MANDATORY"]  # noqa: E501
        if coupon not in allowed_values:
            raise ValueError(
                "Invalid value for `coupon` ({0}), must be one of {1}"  # noqa: E501
                .format(coupon, allowed_values)
            )

        self._coupon = coupon

    @property
    def amount(self):
        """Gets the amount of this SignupPageSignup.  # noqa: E501


        :return: The amount of this SignupPageSignup.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SignupPageSignup.


        :param amount: The amount of this SignupPageSignup.  # noqa: E501
        :type: int
        """

        self._amount = amount

    @property
    def quantity(self):
        """Gets the quantity of this SignupPageSignup.  # noqa: E501


        :return: The quantity of this SignupPageSignup.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this SignupPageSignup.


        :param quantity: The quantity of this SignupPageSignup.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def subscription_configuration(self):
        """Gets the subscription_configuration of this SignupPageSignup.  # noqa: E501


        :return: The subscription_configuration of this SignupPageSignup.  # noqa: E501
        :rtype: CreateSubscription
        """
        return self._subscription_configuration

    @subscription_configuration.setter
    def subscription_configuration(self, subscription_configuration):
        """Sets the subscription_configuration of this SignupPageSignup.


        :param subscription_configuration: The subscription_configuration of this SignupPageSignup.  # noqa: E501
        :type: CreateSubscription
        """

        self._subscription_configuration = subscription_configuration

    @property
    def first_name(self):
        """Gets the first_name of this SignupPageSignup.  # noqa: E501


        :return: The first_name of this SignupPageSignup.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this SignupPageSignup.


        :param first_name: The first_name of this SignupPageSignup.  # noqa: E501
        :type: str
        """
        allowed_values = ["HIDDEN", "OPTIONAL", "MANDATORY"]  # noqa: E501
        if first_name not in allowed_values:
            raise ValueError(
                "Invalid value for `first_name` ({0}), must be one of {1}"  # noqa: E501
                .format(first_name, allowed_values)
            )

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this SignupPageSignup.  # noqa: E501


        :return: The last_name of this SignupPageSignup.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this SignupPageSignup.


        :param last_name: The last_name of this SignupPageSignup.  # noqa: E501
        :type: str
        """
        allowed_values = ["HIDDEN", "OPTIONAL", "MANDATORY"]  # noqa: E501
        if last_name not in allowed_values:
            raise ValueError(
                "Invalid value for `last_name` ({0}), must be one of {1}"  # noqa: E501
                .format(last_name, allowed_values)
            )

        self._last_name = last_name

    @property
    def postal_code(self):
        """Gets the postal_code of this SignupPageSignup.  # noqa: E501


        :return: The postal_code of this SignupPageSignup.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this SignupPageSignup.


        :param postal_code: The postal_code of this SignupPageSignup.  # noqa: E501
        :type: str
        """
        allowed_values = ["HIDDEN", "OPTIONAL", "MANDATORY"]  # noqa: E501
        if postal_code not in allowed_values:
            raise ValueError(
                "Invalid value for `postal_code` ({0}), must be one of {1}"  # noqa: E501
                .format(postal_code, allowed_values)
            )

        self._postal_code = postal_code

    @property
    def amount_incl_vat(self):
        """Gets the amount_incl_vat of this SignupPageSignup.  # noqa: E501


        :return: The amount_incl_vat of this SignupPageSignup.  # noqa: E501
        :rtype: bool
        """
        return self._amount_incl_vat

    @amount_incl_vat.setter
    def amount_incl_vat(self, amount_incl_vat):
        """Sets the amount_incl_vat of this SignupPageSignup.


        :param amount_incl_vat: The amount_incl_vat of this SignupPageSignup.  # noqa: E501
        :type: bool
        """

        self._amount_incl_vat = amount_incl_vat

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SignupPageSignup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        return (
            self.__dict__ == other.__dict__
            if isinstance(other, SignupPageSignup)
            else False
        )

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
