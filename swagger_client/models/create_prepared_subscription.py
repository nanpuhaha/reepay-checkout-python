# coding: utf-8

"""
    Reepay Checkout API

    Reepay Checkout REST API  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CreatePreparedSubscription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer': 'str',
        'plan': 'str',
        'amount': 'int',
        'quantity': 'int',
        'test': 'bool',
        'handle': 'str',
        'metadata': 'dict(str, object)',
        'create_customer': 'CreateCustomer',
        'plan_version': 'int',
        'amount_incl_vat': 'bool',
        'generate_handle': 'bool',
        'start_date': 'str',
        'end_date': 'str',
        'grace_duration': 'int',
        'no_trial': 'bool',
        'no_setup_fee': 'bool',
        'subscription_discounts': 'list[CreateSubscriptionDiscount]',
        'coupon_codes': 'list[str]',
        'add_ons': 'list[CreateSubscriptionAddOn]',
        'additional_costs': 'list[CreateSubscriptionAdditionalCost]'
    }

    attribute_map = {
        'customer': 'customer',
        'plan': 'plan',
        'amount': 'amount',
        'quantity': 'quantity',
        'test': 'test',
        'handle': 'handle',
        'metadata': 'metadata',
        'create_customer': 'create_customer',
        'plan_version': 'plan_version',
        'amount_incl_vat': 'amount_incl_vat',
        'generate_handle': 'generate_handle',
        'start_date': 'start_date',
        'end_date': 'end_date',
        'grace_duration': 'grace_duration',
        'no_trial': 'no_trial',
        'no_setup_fee': 'no_setup_fee',
        'subscription_discounts': 'subscription_discounts',
        'coupon_codes': 'coupon_codes',
        'add_ons': 'add_ons',
        'additional_costs': 'additional_costs'
    }

    def __init__(self, customer=None, plan=None, amount=None, quantity=None, test=None, handle=None, metadata=None, create_customer=None, plan_version=None, amount_incl_vat=None, generate_handle=None, start_date=None, end_date=None, grace_duration=None, no_trial=None, no_setup_fee=None, subscription_discounts=None, coupon_codes=None, add_ons=None, additional_costs=None):  # noqa: E501
        """CreatePreparedSubscription - a model defined in Swagger"""  # noqa: E501

        self._customer = None
        self._plan = None
        self._amount = None
        self._quantity = None
        self._test = None
        self._handle = None
        self._metadata = None
        self._create_customer = None
        self._plan_version = None
        self._amount_incl_vat = None
        self._generate_handle = None
        self._start_date = None
        self._end_date = None
        self._grace_duration = None
        self._no_trial = None
        self._no_setup_fee = None
        self._subscription_discounts = None
        self._coupon_codes = None
        self._add_ons = None
        self._additional_costs = None
        self.discriminator = None

        if customer is not None:
            self.customer = customer
        self.plan = plan
        if amount is not None:
            self.amount = amount
        if quantity is not None:
            self.quantity = quantity
        if test is not None:
            self.test = test
        if handle is not None:
            self.handle = handle
        if metadata is not None:
            self.metadata = metadata
        if create_customer is not None:
            self.create_customer = create_customer
        if plan_version is not None:
            self.plan_version = plan_version
        if amount_incl_vat is not None:
            self.amount_incl_vat = amount_incl_vat
        if generate_handle is not None:
            self.generate_handle = generate_handle
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if grace_duration is not None:
            self.grace_duration = grace_duration
        if no_trial is not None:
            self.no_trial = no_trial
        if no_setup_fee is not None:
            self.no_setup_fee = no_setup_fee
        if subscription_discounts is not None:
            self.subscription_discounts = subscription_discounts
        if coupon_codes is not None:
            self.coupon_codes = coupon_codes
        if add_ons is not None:
            self.add_ons = add_ons
        if additional_costs is not None:
            self.additional_costs = additional_costs

    @property
    def customer(self):
        """Gets the customer of this CreatePreparedSubscription.  # noqa: E501

        Customer handle of existing customer. Customer can also be provided in same operation by supplying the parameter `create_customer`.  # noqa: E501

        :return: The customer of this CreatePreparedSubscription.  # noqa: E501
        :rtype: str
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this CreatePreparedSubscription.

        Customer handle of existing customer. Customer can also be provided in same operation by supplying the parameter `create_customer`.  # noqa: E501

        :param customer: The customer of this CreatePreparedSubscription.  # noqa: E501
        :type: str
        """

        self._customer = customer

    @property
    def plan(self):
        """Gets the plan of this CreatePreparedSubscription.  # noqa: E501

        Plan handle  # noqa: E501

        :return: The plan of this CreatePreparedSubscription.  # noqa: E501
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this CreatePreparedSubscription.

        Plan handle  # noqa: E501

        :param plan: The plan of this CreatePreparedSubscription.  # noqa: E501
        :type: str
        """
        if plan is None:
            raise ValueError("Invalid value for `plan`, must not be `None`")  # noqa: E501

        self._plan = plan

    @property
    def amount(self):
        """Gets the amount of this CreatePreparedSubscription.  # noqa: E501

        Optional custom per quantity plan price. If provided the plan price billed for each billing period will be overridden by this price.  # noqa: E501

        :return: The amount of this CreatePreparedSubscription.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreatePreparedSubscription.

        Optional custom per quantity plan price. If provided the plan price billed for each billing period will be overridden by this price.  # noqa: E501

        :param amount: The amount of this CreatePreparedSubscription.  # noqa: E501
        :type: int
        """
        if amount is not None and amount < 0:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `0`")  # noqa: E501

        self._amount = amount

    @property
    def quantity(self):
        """Gets the quantity of this CreatePreparedSubscription.  # noqa: E501

        Optional quantity of the plan product for this subscription. If not provided the default is the default plan quantity defined for the plan.  # noqa: E501

        :return: The quantity of this CreatePreparedSubscription.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this CreatePreparedSubscription.

        Optional quantity of the plan product for this subscription. If not provided the default is the default plan quantity defined for the plan.  # noqa: E501

        :param quantity: The quantity of this CreatePreparedSubscription.  # noqa: E501
        :type: int
        """
        if quantity is not None and quantity < 1:  # noqa: E501
            raise ValueError("Invalid value for `quantity`, must be a value greater than or equal to `1`")  # noqa: E501

        self._quantity = quantity

    @property
    def test(self):
        """Gets the test of this CreatePreparedSubscription.  # noqa: E501

        Test flag. If given it will be verified that the account state matches the intended create state.  # noqa: E501

        :return: The test of this CreatePreparedSubscription.  # noqa: E501
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this CreatePreparedSubscription.

        Test flag. If given it will be verified that the account state matches the intended create state.  # noqa: E501

        :param test: The test of this CreatePreparedSubscription.  # noqa: E501
        :type: bool
        """

        self._test = test

    @property
    def handle(self):
        """Gets the handle of this CreatePreparedSubscription.  # noqa: E501

        Per account unique handle for the subscription. Max length 255 with allowable characters [a-zA-Z0-9_.-@]. Must be provided if generate_handle not defined.  # noqa: E501

        :return: The handle of this CreatePreparedSubscription.  # noqa: E501
        :rtype: str
        """
        return self._handle

    @handle.setter
    def handle(self, handle):
        """Sets the handle of this CreatePreparedSubscription.

        Per account unique handle for the subscription. Max length 255 with allowable characters [a-zA-Z0-9_.-@]. Must be provided if generate_handle not defined.  # noqa: E501

        :param handle: The handle of this CreatePreparedSubscription.  # noqa: E501
        :type: str
        """

        self._handle = handle

    @property
    def metadata(self):
        """Gets the metadata of this CreatePreparedSubscription.  # noqa: E501

        Custom metadata.  # noqa: E501

        :return: The metadata of this CreatePreparedSubscription.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CreatePreparedSubscription.

        Custom metadata.  # noqa: E501

        :param metadata: The metadata of this CreatePreparedSubscription.  # noqa: E501
        :type: dict(str, object)
        """

        self._metadata = metadata

    @property
    def create_customer(self):
        """Gets the create_customer of this CreatePreparedSubscription.  # noqa: E501

        Create customer and subscription in an atomic operation  # noqa: E501

        :return: The create_customer of this CreatePreparedSubscription.  # noqa: E501
        :rtype: CreateCustomer
        """
        return self._create_customer

    @create_customer.setter
    def create_customer(self, create_customer):
        """Sets the create_customer of this CreatePreparedSubscription.

        Create customer and subscription in an atomic operation  # noqa: E501

        :param create_customer: The create_customer of this CreatePreparedSubscription.  # noqa: E501
        :type: CreateCustomer
        """

        self._create_customer = create_customer

    @property
    def plan_version(self):
        """Gets the plan_version of this CreatePreparedSubscription.  # noqa: E501

        Optional plan version, default is to use newest version of plan  # noqa: E501

        :return: The plan_version of this CreatePreparedSubscription.  # noqa: E501
        :rtype: int
        """
        return self._plan_version

    @plan_version.setter
    def plan_version(self, plan_version):
        """Sets the plan_version of this CreatePreparedSubscription.

        Optional plan version, default is to use newest version of plan  # noqa: E501

        :param plan_version: The plan_version of this CreatePreparedSubscription.  # noqa: E501
        :type: int
        """
        if plan_version is not None and plan_version < 1:  # noqa: E501
            raise ValueError("Invalid value for `plan_version`, must be a value greater than or equal to `1`")  # noqa: E501

        self._plan_version = plan_version

    @property
    def amount_incl_vat(self):
        """Gets the amount_incl_vat of this CreatePreparedSubscription.  # noqa: E501

        Whether the optional amount is including VAT. Defaults to true.  # noqa: E501

        :return: The amount_incl_vat of this CreatePreparedSubscription.  # noqa: E501
        :rtype: bool
        """
        return self._amount_incl_vat

    @amount_incl_vat.setter
    def amount_incl_vat(self, amount_incl_vat):
        """Sets the amount_incl_vat of this CreatePreparedSubscription.

        Whether the optional amount is including VAT. Defaults to true.  # noqa: E501

        :param amount_incl_vat: The amount_incl_vat of this CreatePreparedSubscription.  # noqa: E501
        :type: bool
        """

        self._amount_incl_vat = amount_incl_vat

    @property
    def generate_handle(self):
        """Gets the generate_handle of this CreatePreparedSubscription.  # noqa: E501

        Auto generate handle on the form sub-[sequence_number]  # noqa: E501

        :return: The generate_handle of this CreatePreparedSubscription.  # noqa: E501
        :rtype: bool
        """
        return self._generate_handle

    @generate_handle.setter
    def generate_handle(self, generate_handle):
        """Sets the generate_handle of this CreatePreparedSubscription.

        Auto generate handle on the form sub-[sequence_number]  # noqa: E501

        :param generate_handle: The generate_handle of this CreatePreparedSubscription.  # noqa: E501
        :type: bool
        """

        self._generate_handle = generate_handle

    @property
    def start_date(self):
        """Gets the start_date of this CreatePreparedSubscription.  # noqa: E501

        Date and time on the form `yyyy-MM-dd`, `yyyyMMdd`, `yyyy-MM-ddTHH:mm` and `yyyy-MM-ddTHH:mm:ss` from which the subscription is eligible to schedule first invoice. If no time part is given start of day will be used. A start date in the past can be used, but no more than one period length in the past. A start date in the past can result in an instant invoice for a past billing period start. Default value is current date and time.  # noqa: E501

        :return: The start_date of this CreatePreparedSubscription.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this CreatePreparedSubscription.

        Date and time on the form `yyyy-MM-dd`, `yyyyMMdd`, `yyyy-MM-ddTHH:mm` and `yyyy-MM-ddTHH:mm:ss` from which the subscription is eligible to schedule first invoice. If no time part is given start of day will be used. A start date in the past can be used, but no more than one period length in the past. A start date in the past can result in an instant invoice for a past billing period start. Default value is current date and time.  # noqa: E501

        :param start_date: The start_date of this CreatePreparedSubscription.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this CreatePreparedSubscription.  # noqa: E501

        Fixed date and time on the form `yyyy-MM-dd`, `yyyyMMdd`, `yyyy-MM-ddTHH:mm` and `yyyy-MM-ddTHH:mm:ss` where the subscription will automatically cancel. The subscription will expire at the end of the billing period containing the end date. Default is no fixed end date.  # noqa: E501

        :return: The end_date of this CreatePreparedSubscription.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this CreatePreparedSubscription.

        Fixed date and time on the form `yyyy-MM-dd`, `yyyyMMdd`, `yyyy-MM-ddTHH:mm` and `yyyy-MM-ddTHH:mm:ss` where the subscription will automatically cancel. The subscription will expire at the end of the billing period containing the end date. Default is no fixed end date.  # noqa: E501

        :param end_date: The end_date of this CreatePreparedSubscription.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def grace_duration(self):
        """Gets the grace_duration of this CreatePreparedSubscription.  # noqa: E501

        A grace duration in seconds from the creation of a subscription where no dunning process is started for a failing invoice. This allows a certain amount of time for the customer to sign up with a payment method.  # noqa: E501

        :return: The grace_duration of this CreatePreparedSubscription.  # noqa: E501
        :rtype: int
        """
        return self._grace_duration

    @grace_duration.setter
    def grace_duration(self, grace_duration):
        """Sets the grace_duration of this CreatePreparedSubscription.

        A grace duration in seconds from the creation of a subscription where no dunning process is started for a failing invoice. This allows a certain amount of time for the customer to sign up with a payment method.  # noqa: E501

        :param grace_duration: The grace_duration of this CreatePreparedSubscription.  # noqa: E501
        :type: int
        """
        if grace_duration is not None and grace_duration < 0:  # noqa: E501
            raise ValueError("Invalid value for `grace_duration`, must be a value greater than or equal to `0`")  # noqa: E501

        self._grace_duration = grace_duration

    @property
    def no_trial(self):
        """Gets the no_trial of this CreatePreparedSubscription.  # noqa: E501

        Override plan trial settings and disable trial  # noqa: E501

        :return: The no_trial of this CreatePreparedSubscription.  # noqa: E501
        :rtype: bool
        """
        return self._no_trial

    @no_trial.setter
    def no_trial(self, no_trial):
        """Sets the no_trial of this CreatePreparedSubscription.

        Override plan trial settings and disable trial  # noqa: E501

        :param no_trial: The no_trial of this CreatePreparedSubscription.  # noqa: E501
        :type: bool
        """

        self._no_trial = no_trial

    @property
    def no_setup_fee(self):
        """Gets the no_setup_fee of this CreatePreparedSubscription.  # noqa: E501

        Override plan setup fee settings and disable fee  # noqa: E501

        :return: The no_setup_fee of this CreatePreparedSubscription.  # noqa: E501
        :rtype: bool
        """
        return self._no_setup_fee

    @no_setup_fee.setter
    def no_setup_fee(self, no_setup_fee):
        """Sets the no_setup_fee of this CreatePreparedSubscription.

        Override plan setup fee settings and disable fee  # noqa: E501

        :param no_setup_fee: The no_setup_fee of this CreatePreparedSubscription.  # noqa: E501
        :type: bool
        """

        self._no_setup_fee = no_setup_fee

    @property
    def subscription_discounts(self):
        """Gets the subscription_discounts of this CreatePreparedSubscription.  # noqa: E501

        Discounts to attach to subscription  # noqa: E501

        :return: The subscription_discounts of this CreatePreparedSubscription.  # noqa: E501
        :rtype: list[CreateSubscriptionDiscount]
        """
        return self._subscription_discounts

    @subscription_discounts.setter
    def subscription_discounts(self, subscription_discounts):
        """Sets the subscription_discounts of this CreatePreparedSubscription.

        Discounts to attach to subscription  # noqa: E501

        :param subscription_discounts: The subscription_discounts of this CreatePreparedSubscription.  # noqa: E501
        :type: list[CreateSubscriptionDiscount]
        """

        self._subscription_discounts = subscription_discounts

    @property
    def coupon_codes(self):
        """Gets the coupon_codes of this CreatePreparedSubscription.  # noqa: E501

        Coupon codes to redeem for subscription  # noqa: E501

        :return: The coupon_codes of this CreatePreparedSubscription.  # noqa: E501
        :rtype: list[str]
        """
        return self._coupon_codes

    @coupon_codes.setter
    def coupon_codes(self, coupon_codes):
        """Sets the coupon_codes of this CreatePreparedSubscription.

        Coupon codes to redeem for subscription  # noqa: E501

        :param coupon_codes: The coupon_codes of this CreatePreparedSubscription.  # noqa: E501
        :type: list[str]
        """

        self._coupon_codes = coupon_codes

    @property
    def add_ons(self):
        """Gets the add_ons of this CreatePreparedSubscription.  # noqa: E501

        Add-ons to attach to subscription. The same add-on can only be attached to subscription once unless unique handles are supplied for the subscription add-on.  # noqa: E501

        :return: The add_ons of this CreatePreparedSubscription.  # noqa: E501
        :rtype: list[CreateSubscriptionAddOn]
        """
        return self._add_ons

    @add_ons.setter
    def add_ons(self, add_ons):
        """Sets the add_ons of this CreatePreparedSubscription.

        Add-ons to attach to subscription. The same add-on can only be attached to subscription once unless unique handles are supplied for the subscription add-on.  # noqa: E501

        :param add_ons: The add_ons of this CreatePreparedSubscription.  # noqa: E501
        :type: list[CreateSubscriptionAddOn]
        """

        self._add_ons = add_ons

    @property
    def additional_costs(self):
        """Gets the additional_costs of this CreatePreparedSubscription.  # noqa: E501

        Additional costs to add to subscription at creation time  # noqa: E501

        :return: The additional_costs of this CreatePreparedSubscription.  # noqa: E501
        :rtype: list[CreateSubscriptionAdditionalCost]
        """
        return self._additional_costs

    @additional_costs.setter
    def additional_costs(self, additional_costs):
        """Sets the additional_costs of this CreatePreparedSubscription.

        Additional costs to add to subscription at creation time  # noqa: E501

        :param additional_costs: The additional_costs of this CreatePreparedSubscription.  # noqa: E501
        :type: list[CreateSubscriptionAdditionalCost]
        """

        self._additional_costs = additional_costs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreatePreparedSubscription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreatePreparedSubscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
