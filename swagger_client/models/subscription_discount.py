# coding: utf-8

"""
    Reepay Checkout API

    Reepay Checkout REST API  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SubscriptionDiscount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'handle': 'str',
        'discount': 'str',
        'state': 'str',
        'coupon': 'str',
        'deleted': 'datetime',
        'created': 'datetime',
        'name': 'str',
        'description': 'str',
        'amount': 'int',
        'percentage': 'int',
        'count': 'int',
        'invoices': 'list[str]',
        'apply_to': 'list[str]',
        'fixed_count': 'int',
        'fixed_period_unit': 'str',
        'fixed_period': 'int',
        'fixed_usage_reached': 'bool',
        'fixed_period_passed': 'bool'
    }

    attribute_map = {
        'handle': 'handle',
        'discount': 'discount',
        'state': 'state',
        'coupon': 'coupon',
        'deleted': 'deleted',
        'created': 'created',
        'name': 'name',
        'description': 'description',
        'amount': 'amount',
        'percentage': 'percentage',
        'count': 'count',
        'invoices': 'invoices',
        'apply_to': 'apply_to',
        'fixed_count': 'fixed_count',
        'fixed_period_unit': 'fixed_period_unit',
        'fixed_period': 'fixed_period',
        'fixed_usage_reached': 'fixed_usage_reached',
        'fixed_period_passed': 'fixed_period_passed'
    }

    def __init__(self, handle=None, discount=None, state=None, coupon=None, deleted=None, created=None, name=None, description=None, amount=None, percentage=None, count=None, invoices=None, apply_to=None, fixed_count=None, fixed_period_unit=None, fixed_period=None, fixed_usage_reached=None, fixed_period_passed=None):  # noqa: E501
        """SubscriptionDiscount - a model defined in Swagger"""  # noqa: E501

        self._handle = None
        self._discount = None
        self._state = None
        self._coupon = None
        self._deleted = None
        self._created = None
        self._name = None
        self._description = None
        self._amount = None
        self._percentage = None
        self._count = None
        self._invoices = None
        self._apply_to = None
        self._fixed_count = None
        self._fixed_period_unit = None
        self._fixed_period = None
        self._fixed_usage_reached = None
        self._fixed_period_passed = None
        self.discriminator = None

        self.handle = handle
        self.discount = discount
        self.state = state
        if coupon is not None:
            self.coupon = coupon
        if deleted is not None:
            self.deleted = deleted
        self.created = created
        self.name = name
        if description is not None:
            self.description = description
        if amount is not None:
            self.amount = amount
        if percentage is not None:
            self.percentage = percentage
        self.count = count
        self.invoices = invoices
        self.apply_to = apply_to
        if fixed_count is not None:
            self.fixed_count = fixed_count
        if fixed_period_unit is not None:
            self.fixed_period_unit = fixed_period_unit
        if fixed_period is not None:
            self.fixed_period = fixed_period
        self.fixed_usage_reached = fixed_usage_reached
        self.fixed_period_passed = fixed_period_passed

    @property
    def handle(self):
        """Gets the handle of this SubscriptionDiscount.  # noqa: E501

        Per subscription unique handle for the subscription discount.  # noqa: E501

        :return: The handle of this SubscriptionDiscount.  # noqa: E501
        :rtype: str
        """
        return self._handle

    @handle.setter
    def handle(self, handle):
        """Sets the handle of this SubscriptionDiscount.

        Per subscription unique handle for the subscription discount.  # noqa: E501

        :param handle: The handle of this SubscriptionDiscount.  # noqa: E501
        :type: str
        """
        if handle is None:
            raise ValueError("Invalid value for `handle`, must not be `None`")  # noqa: E501

        self._handle = handle

    @property
    def discount(self):
        """Gets the discount of this SubscriptionDiscount.  # noqa: E501

        Discount for subscription discount  # noqa: E501

        :return: The discount of this SubscriptionDiscount.  # noqa: E501
        :rtype: str
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this SubscriptionDiscount.

        Discount for subscription discount  # noqa: E501

        :param discount: The discount of this SubscriptionDiscount.  # noqa: E501
        :type: str
        """
        if discount is None:
            raise ValueError("Invalid value for `discount`, must not be `None`")  # noqa: E501

        self._discount = discount

    @property
    def state(self):
        """Gets the state of this SubscriptionDiscount.  # noqa: E501

        Discount state `active` or `deleted`.  # noqa: E501

        :return: The state of this SubscriptionDiscount.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this SubscriptionDiscount.

        Discount state `active` or `deleted`.  # noqa: E501

        :param state: The state of this SubscriptionDiscount.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["active", "deleted"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def coupon(self):
        """Gets the coupon of this SubscriptionDiscount.  # noqa: E501

        Coupon reference if this discount was released by a coupon code  # noqa: E501

        :return: The coupon of this SubscriptionDiscount.  # noqa: E501
        :rtype: str
        """
        return self._coupon

    @coupon.setter
    def coupon(self, coupon):
        """Sets the coupon of this SubscriptionDiscount.

        Coupon reference if this discount was released by a coupon code  # noqa: E501

        :param coupon: The coupon of this SubscriptionDiscount.  # noqa: E501
        :type: str
        """

        self._coupon = coupon

    @property
    def deleted(self):
        """Gets the deleted of this SubscriptionDiscount.  # noqa: E501

        Date when the discount was deleted if deleted. In ISO-8601 extended offset date-time format.  # noqa: E501

        :return: The deleted of this SubscriptionDiscount.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this SubscriptionDiscount.

        Date when the discount was deleted if deleted. In ISO-8601 extended offset date-time format.  # noqa: E501

        :param deleted: The deleted of this SubscriptionDiscount.  # noqa: E501
        :type: datetime
        """

        self._deleted = deleted

    @property
    def created(self):
        """Gets the created of this SubscriptionDiscount.  # noqa: E501

        Date when the discount was created. In ISO-8601 extended offset date-time format.  # noqa: E501

        :return: The created of this SubscriptionDiscount.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this SubscriptionDiscount.

        Date when the discount was created. In ISO-8601 extended offset date-time format.  # noqa: E501

        :param created: The created of this SubscriptionDiscount.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def name(self):
        """Gets the name of this SubscriptionDiscount.  # noqa: E501

        Name of discount. Will be used as order line text.  # noqa: E501

        :return: The name of this SubscriptionDiscount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SubscriptionDiscount.

        Name of discount. Will be used as order line text.  # noqa: E501

        :param name: The name of this SubscriptionDiscount.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this SubscriptionDiscount.  # noqa: E501

        Optional description of discount  # noqa: E501

        :return: The description of this SubscriptionDiscount.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SubscriptionDiscount.

        Optional description of discount  # noqa: E501

        :param description: The description of this SubscriptionDiscount.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def amount(self):
        """Gets the amount of this SubscriptionDiscount.  # noqa: E501

        Fixed amount discount deducted from order line amounts including VAT  # noqa: E501

        :return: The amount of this SubscriptionDiscount.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SubscriptionDiscount.

        Fixed amount discount deducted from order line amounts including VAT  # noqa: E501

        :param amount: The amount of this SubscriptionDiscount.  # noqa: E501
        :type: int
        """
        if amount is not None and amount < 1:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `1`")  # noqa: E501

        self._amount = amount

    @property
    def percentage(self):
        """Gets the percentage of this SubscriptionDiscount.  # noqa: E501

        Percentage discount applied to each applicable order line  # noqa: E501

        :return: The percentage of this SubscriptionDiscount.  # noqa: E501
        :rtype: int
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this SubscriptionDiscount.

        Percentage discount applied to each applicable order line  # noqa: E501

        :param percentage: The percentage of this SubscriptionDiscount.  # noqa: E501
        :type: int
        """
        if percentage is not None and percentage > 100:  # noqa: E501
            raise ValueError("Invalid value for `percentage`, must be a value less than or equal to `100`")  # noqa: E501
        if percentage is not None and percentage < 1:  # noqa: E501
            raise ValueError("Invalid value for `percentage`, must be a value greater than or equal to `1`")  # noqa: E501

        self._percentage = percentage

    @property
    def count(self):
        """Gets the count of this SubscriptionDiscount.  # noqa: E501

        Number of invoices this subscription discount has been applied to  # noqa: E501

        :return: The count of this SubscriptionDiscount.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this SubscriptionDiscount.

        Number of invoices this subscription discount has been applied to  # noqa: E501

        :param count: The count of this SubscriptionDiscount.  # noqa: E501
        :type: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501

        self._count = count

    @property
    def invoices(self):
        """Gets the invoices of this SubscriptionDiscount.  # noqa: E501

        List of invoices this subscription discount has been applied to  # noqa: E501

        :return: The invoices of this SubscriptionDiscount.  # noqa: E501
        :rtype: list[str]
        """
        return self._invoices

    @invoices.setter
    def invoices(self, invoices):
        """Sets the invoices of this SubscriptionDiscount.

        List of invoices this subscription discount has been applied to  # noqa: E501

        :param invoices: The invoices of this SubscriptionDiscount.  # noqa: E501
        :type: list[str]
        """
        if invoices is None:
            raise ValueError("Invalid value for `invoices`, must not be `None`")  # noqa: E501

        self._invoices = invoices

    @property
    def apply_to(self):
        """Gets the apply_to of this SubscriptionDiscount.  # noqa: E501

        Which order lines the discount is applicable to: `all`, `setup_fee`, `plan`, `additional_cost`, `add_on` and `ondemand`  # noqa: E501

        :return: The apply_to of this SubscriptionDiscount.  # noqa: E501
        :rtype: list[str]
        """
        return self._apply_to

    @apply_to.setter
    def apply_to(self, apply_to):
        """Sets the apply_to of this SubscriptionDiscount.

        Which order lines the discount is applicable to: `all`, `setup_fee`, `plan`, `additional_cost`, `add_on` and `ondemand`  # noqa: E501

        :param apply_to: The apply_to of this SubscriptionDiscount.  # noqa: E501
        :type: list[str]
        """
        if apply_to is None:
            raise ValueError("Invalid value for `apply_to`, must not be `None`")  # noqa: E501

        self._apply_to = apply_to

    @property
    def fixed_count(self):
        """Gets the fixed_count of this SubscriptionDiscount.  # noqa: E501

        Apply discount to a fixed number of invoices  # noqa: E501

        :return: The fixed_count of this SubscriptionDiscount.  # noqa: E501
        :rtype: int
        """
        return self._fixed_count

    @fixed_count.setter
    def fixed_count(self, fixed_count):
        """Sets the fixed_count of this SubscriptionDiscount.

        Apply discount to a fixed number of invoices  # noqa: E501

        :param fixed_count: The fixed_count of this SubscriptionDiscount.  # noqa: E501
        :type: int
        """
        if fixed_count is not None and fixed_count < 1:  # noqa: E501
            raise ValueError("Invalid value for `fixed_count`, must be a value greater than or equal to `1`")  # noqa: E501

        self._fixed_count = fixed_count

    @property
    def fixed_period_unit(self):
        """Gets the fixed_period_unit of this SubscriptionDiscount.  # noqa: E501

        Time unit use for fixed valid period  # noqa: E501

        :return: The fixed_period_unit of this SubscriptionDiscount.  # noqa: E501
        :rtype: str
        """
        return self._fixed_period_unit

    @fixed_period_unit.setter
    def fixed_period_unit(self, fixed_period_unit):
        """Sets the fixed_period_unit of this SubscriptionDiscount.

        Time unit use for fixed valid period  # noqa: E501

        :param fixed_period_unit: The fixed_period_unit of this SubscriptionDiscount.  # noqa: E501
        :type: str
        """
        allowed_values = ["months", "days"]  # noqa: E501
        if fixed_period_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `fixed_period_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(fixed_period_unit, allowed_values)
            )

        self._fixed_period_unit = fixed_period_unit

    @property
    def fixed_period(self):
        """Gets the fixed_period of this SubscriptionDiscount.  # noqa: E501

        Fixed period length e.g. 12 months or 14 days  # noqa: E501

        :return: The fixed_period of this SubscriptionDiscount.  # noqa: E501
        :rtype: int
        """
        return self._fixed_period

    @fixed_period.setter
    def fixed_period(self, fixed_period):
        """Sets the fixed_period of this SubscriptionDiscount.

        Fixed period length e.g. 12 months or 14 days  # noqa: E501

        :param fixed_period: The fixed_period of this SubscriptionDiscount.  # noqa: E501
        :type: int
        """
        if fixed_period is not None and fixed_period < 1:  # noqa: E501
            raise ValueError("Invalid value for `fixed_period`, must be a value greater than or equal to `1`")  # noqa: E501

        self._fixed_period = fixed_period

    @property
    def fixed_usage_reached(self):
        """Gets the fixed_usage_reached of this SubscriptionDiscount.  # noqa: E501

        Whether fixed usage for subscription discount has been reached  # noqa: E501

        :return: The fixed_usage_reached of this SubscriptionDiscount.  # noqa: E501
        :rtype: bool
        """
        return self._fixed_usage_reached

    @fixed_usage_reached.setter
    def fixed_usage_reached(self, fixed_usage_reached):
        """Sets the fixed_usage_reached of this SubscriptionDiscount.

        Whether fixed usage for subscription discount has been reached  # noqa: E501

        :param fixed_usage_reached: The fixed_usage_reached of this SubscriptionDiscount.  # noqa: E501
        :type: bool
        """
        if fixed_usage_reached is None:
            raise ValueError("Invalid value for `fixed_usage_reached`, must not be `None`")  # noqa: E501

        self._fixed_usage_reached = fixed_usage_reached

    @property
    def fixed_period_passed(self):
        """Gets the fixed_period_passed of this SubscriptionDiscount.  # noqa: E501

        Whether fixed period for subscription discount has been passed  # noqa: E501

        :return: The fixed_period_passed of this SubscriptionDiscount.  # noqa: E501
        :rtype: bool
        """
        return self._fixed_period_passed

    @fixed_period_passed.setter
    def fixed_period_passed(self, fixed_period_passed):
        """Sets the fixed_period_passed of this SubscriptionDiscount.

        Whether fixed period for subscription discount has been passed  # noqa: E501

        :param fixed_period_passed: The fixed_period_passed of this SubscriptionDiscount.  # noqa: E501
        :type: bool
        """
        if fixed_period_passed is None:
            raise ValueError("Invalid value for `fixed_period_passed`, must not be `None`")  # noqa: E501

        self._fixed_period_passed = fixed_period_passed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriptionDiscount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionDiscount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
