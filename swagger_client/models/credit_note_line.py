# coding: utf-8

"""
    Reepay Checkout API

    Reepay Checkout REST API  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CreditNoteLine(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'int',
        'text': 'str',
        'quantity': 'int',
        'order_line_id': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'text': 'text',
        'quantity': 'quantity',
        'order_line_id': 'order_line_id'
    }

    def __init__(self, amount=None, text=None, quantity=None, order_line_id=None):  # noqa: E501
        """CreditNoteLine - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._text = None
        self._quantity = None
        self._order_line_id = None
        self.discriminator = None

        self.amount = amount
        self.text = text
        self.quantity = quantity
        if order_line_id is not None:
            self.order_line_id = order_line_id

    @property
    def amount(self):
        """Gets the amount of this CreditNoteLine.  # noqa: E501

        Credit note line total amount  # noqa: E501

        :return: The amount of this CreditNoteLine.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreditNoteLine.

        Credit note line total amount  # noqa: E501

        :param amount: The amount of this CreditNoteLine.  # noqa: E501
        :type: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501
        if amount < 1:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `1`")  # noqa: E501

        self._amount = amount

    @property
    def text(self):
        """Gets the text of this CreditNoteLine.  # noqa: E501

        Credit note line text  # noqa: E501

        :return: The text of this CreditNoteLine.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this CreditNoteLine.

        Credit note line text  # noqa: E501

        :param text: The text of this CreditNoteLine.  # noqa: E501
        :type: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def quantity(self):
        """Gets the quantity of this CreditNoteLine.  # noqa: E501

        Credit note line quantity  # noqa: E501

        :return: The quantity of this CreditNoteLine.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this CreditNoteLine.

        Credit note line quantity  # noqa: E501

        :param quantity: The quantity of this CreditNoteLine.  # noqa: E501
        :type: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501
        if quantity < 1:  # noqa: E501
            raise ValueError("Invalid value for `quantity`, must be a value greater than or equal to `1`")  # noqa: E501

        self._quantity = quantity

    @property
    def order_line_id(self):
        """Gets the order_line_id of this CreditNoteLine.  # noqa: E501

        Reference to invoice orderline this credit note line relates to  # noqa: E501

        :return: The order_line_id of this CreditNoteLine.  # noqa: E501
        :rtype: str
        """
        return self._order_line_id

    @order_line_id.setter
    def order_line_id(self, order_line_id):
        """Sets the order_line_id of this CreditNoteLine.

        Reference to invoice orderline this credit note line relates to  # noqa: E501

        :param order_line_id: The order_line_id of this CreditNoteLine.  # noqa: E501
        :type: str
        """

        self._order_line_id = order_line_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreditNoteLine, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        return (
            self.__dict__ == other.__dict__
            if isinstance(other, CreditNoteLine)
            else False
        )

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
