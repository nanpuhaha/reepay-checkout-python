# coding: utf-8

"""
    Reepay Checkout API

    Reepay Checkout REST API  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Configuration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'logo': 'str',
        'locale': 'str',
        'handle': 'str',
        'created': 'datetime',
        'payment_methods': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'logo': 'logo',
        'locale': 'locale',
        'handle': 'handle',
        'created': 'created',
        'payment_methods': 'payment_methods'
    }

    def __init__(self, name=None, logo=None, locale=None, handle=None, created=None, payment_methods=None):  # noqa: E501
        """Configuration - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._logo = None
        self._locale = None
        self._handle = None
        self._created = None
        self._payment_methods = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if logo is not None:
            self.logo = logo
        if locale is not None:
            self.locale = locale
        if handle is not None:
            self.handle = handle
        if created is not None:
            self.created = created
        if payment_methods is not None:
            self.payment_methods = payment_methods

    @property
    def name(self):
        """Gets the name of this Configuration.  # noqa: E501

        Descriptive name for configuration  # noqa: E501

        :return: The name of this Configuration.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Configuration.

        Descriptive name for configuration  # noqa: E501

        :param name: The name of this Configuration.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def logo(self):
        """Gets the logo of this Configuration.  # noqa: E501

        Logo url. Must be hosted on a *.reepay.com domain.  # noqa: E501

        :return: The logo of this Configuration.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this Configuration.

        Logo url. Must be hosted on a *.reepay.com domain.  # noqa: E501

        :param logo: The logo of this Configuration.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def locale(self):
        """Gets the locale of this Configuration.  # noqa: E501

        Locale to use if not provided when creating session. Defaults to account locale.  # noqa: E501

        :return: The locale of this Configuration.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this Configuration.

        Locale to use if not provided when creating session. Defaults to account locale.  # noqa: E501

        :param locale: The locale of this Configuration.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def handle(self):
        """Gets the handle of this Configuration.  # noqa: E501


        :return: The handle of this Configuration.  # noqa: E501
        :rtype: str
        """
        return self._handle

    @handle.setter
    def handle(self, handle):
        """Sets the handle of this Configuration.


        :param handle: The handle of this Configuration.  # noqa: E501
        :type: str
        """

        self._handle = handle

    @property
    def created(self):
        """Gets the created of this Configuration.  # noqa: E501


        :return: The created of this Configuration.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Configuration.


        :param created: The created of this Configuration.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def payment_methods(self):
        """Gets the payment_methods of this Configuration.  # noqa: E501

        Optional lists of payment methods to use for sessions with this configuration  # noqa: E501

        :return: The payment_methods of this Configuration.  # noqa: E501
        :rtype: list[str]
        """
        return self._payment_methods

    @payment_methods.setter
    def payment_methods(self, payment_methods):
        """Sets the payment_methods of this Configuration.

        Optional lists of payment methods to use for sessions with this configuration  # noqa: E501

        :param payment_methods: The payment_methods of this Configuration.  # noqa: E501
        :type: list[str]
        """

        self._payment_methods = payment_methods

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Configuration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Configuration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
