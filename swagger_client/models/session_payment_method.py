# coding: utf-8

"""
    Reepay Checkout API

    Reepay Checkout REST API  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SessionPaymentMethod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'card_type': 'str',
        'sca_rule': 'str',
        'sca_fallback': 'bool'
    }

    attribute_map = {
        'type': 'type',
        'card_type': 'card_type',
        'sca_rule': 'sca_rule',
        'sca_fallback': 'sca_fallback'
    }

    def __init__(self, type=None, card_type=None, sca_rule=None, sca_fallback=None):  # noqa: E501
        """SessionPaymentMethod - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._card_type = None
        self._sca_rule = None
        self._sca_fallback = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if card_type is not None:
            self.card_type = card_type
        if sca_rule is not None:
            self.sca_rule = sca_rule
        if sca_fallback is not None:
            self.sca_fallback = sca_fallback

    @property
    def type(self):
        """Gets the type of this SessionPaymentMethod.  # noqa: E501


        :return: The type of this SessionPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SessionPaymentMethod.


        :param type: The type of this SessionPaymentMethod.  # noqa: E501
        :type: str
        """
        allowed_values = ["CARD", "APPLEPAY", "GOOGLEPAY", "PAYPAL", "VIABILL", "MOBILEPAY", "MOBILEPAY_SUBSCRIPTION", "KLARNA_PAY_NOW", "KLARNA_PAY_LATER", "RESURS", "MANUAL"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def card_type(self):
        """Gets the card_type of this SessionPaymentMethod.  # noqa: E501


        :return: The card_type of this SessionPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this SessionPaymentMethod.


        :param card_type: The card_type of this SessionPaymentMethod.  # noqa: E501
        :type: str
        """
        allowed_values = ["UNKNOWN", "VISA", "MC", "DANKORT", "VISA_DK", "FFK", "VISA_ELEC", "MAESTRO", "LASER", "AMEX", "DINERS", "DISCOVER", "JCB", "CHINA_UNION_PAY"]  # noqa: E501
        if card_type not in allowed_values:
            raise ValueError(
                "Invalid value for `card_type` ({0}), must be one of {1}"  # noqa: E501
                .format(card_type, allowed_values)
            )

        self._card_type = card_type

    @property
    def sca_rule(self):
        """Gets the sca_rule of this SessionPaymentMethod.  # noqa: E501


        :return: The sca_rule of this SessionPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._sca_rule

    @sca_rule.setter
    def sca_rule(self, sca_rule):
        """Sets the sca_rule of this SessionPaymentMethod.


        :param sca_rule: The sca_rule of this SessionPaymentMethod.  # noqa: E501
        :type: str
        """
        allowed_values = ["USE_SCA_IF_AVAILABLE_PREAUTH", "USE_SCA_IF_AVAILABLE_AUTH", "MUST_USE_SCA_PREAUTH", "MUST_USE_SCA_AUTH", "DO_NOT_USE_SCA"]  # noqa: E501
        if sca_rule not in allowed_values:
            raise ValueError(
                "Invalid value for `sca_rule` ({0}), must be one of {1}"  # noqa: E501
                .format(sca_rule, allowed_values)
            )

        self._sca_rule = sca_rule

    @property
    def sca_fallback(self):
        """Gets the sca_fallback of this SessionPaymentMethod.  # noqa: E501


        :return: The sca_fallback of this SessionPaymentMethod.  # noqa: E501
        :rtype: bool
        """
        return self._sca_fallback

    @sca_fallback.setter
    def sca_fallback(self, sca_fallback):
        """Sets the sca_fallback of this SessionPaymentMethod.


        :param sca_fallback: The sca_fallback of this SessionPaymentMethod.  # noqa: E501
        :type: bool
        """

        self._sca_fallback = sca_fallback

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SessionPaymentMethod, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        return (
            self.__dict__ == other.__dict__
            if isinstance(other, SessionPaymentMethod)
            else False
        )

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
