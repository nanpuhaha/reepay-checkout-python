# coding: utf-8

"""
    Reepay Checkout API

    Reepay Checkout REST API  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CreateSubscriptionDiscount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'handle': 'str',
        'discount': 'str',
        'name': 'str',
        'description': 'str',
        'amount': 'int',
        'percentage': 'int',
        'apply_to': 'list[str]',
        'fixed_count': 'int',
        'fixed_period_unit': 'str',
        'fixed_period': 'int'
    }

    attribute_map = {
        'handle': 'handle',
        'discount': 'discount',
        'name': 'name',
        'description': 'description',
        'amount': 'amount',
        'percentage': 'percentage',
        'apply_to': 'apply_to',
        'fixed_count': 'fixed_count',
        'fixed_period_unit': 'fixed_period_unit',
        'fixed_period': 'fixed_period'
    }

    def __init__(self, handle=None, discount=None, name=None, description=None, amount=None, percentage=None, apply_to=None, fixed_count=None, fixed_period_unit=None, fixed_period=None):  # noqa: E501
        """CreateSubscriptionDiscount - a model defined in Swagger"""  # noqa: E501

        self._handle = None
        self._discount = None
        self._name = None
        self._description = None
        self._amount = None
        self._percentage = None
        self._apply_to = None
        self._fixed_count = None
        self._fixed_period_unit = None
        self._fixed_period = None
        self.discriminator = None

        self.handle = handle
        self.discount = discount
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if amount is not None:
            self.amount = amount
        if percentage is not None:
            self.percentage = percentage
        if apply_to is not None:
            self.apply_to = apply_to
        if fixed_count is not None:
            self.fixed_count = fixed_count
        if fixed_period_unit is not None:
            self.fixed_period_unit = fixed_period_unit
        if fixed_period is not None:
            self.fixed_period = fixed_period

    @property
    def handle(self):
        """Gets the handle of this CreateSubscriptionDiscount.  # noqa: E501

        Per subscription unique handle for the subscription discount.  # noqa: E501

        :return: The handle of this CreateSubscriptionDiscount.  # noqa: E501
        :rtype: str
        """
        return self._handle

    @handle.setter
    def handle(self, handle):
        """Sets the handle of this CreateSubscriptionDiscount.

        Per subscription unique handle for the subscription discount.  # noqa: E501

        :param handle: The handle of this CreateSubscriptionDiscount.  # noqa: E501
        :type: str
        """
        if handle is None:
            raise ValueError("Invalid value for `handle`, must not be `None`")  # noqa: E501

        self._handle = handle

    @property
    def discount(self):
        """Gets the discount of this CreateSubscriptionDiscount.  # noqa: E501

        Discount for subscription discount  # noqa: E501

        :return: The discount of this CreateSubscriptionDiscount.  # noqa: E501
        :rtype: str
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this CreateSubscriptionDiscount.

        Discount for subscription discount  # noqa: E501

        :param discount: The discount of this CreateSubscriptionDiscount.  # noqa: E501
        :type: str
        """
        if discount is None:
            raise ValueError("Invalid value for `discount`, must not be `None`")  # noqa: E501

        self._discount = discount

    @property
    def name(self):
        """Gets the name of this CreateSubscriptionDiscount.  # noqa: E501

        Optional name overriding discount name  # noqa: E501

        :return: The name of this CreateSubscriptionDiscount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateSubscriptionDiscount.

        Optional name overriding discount name  # noqa: E501

        :param name: The name of this CreateSubscriptionDiscount.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateSubscriptionDiscount.  # noqa: E501

        Optional description overriding discount description  # noqa: E501

        :return: The description of this CreateSubscriptionDiscount.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateSubscriptionDiscount.

        Optional description overriding discount description  # noqa: E501

        :param description: The description of this CreateSubscriptionDiscount.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def amount(self):
        """Gets the amount of this CreateSubscriptionDiscount.  # noqa: E501

        Optional overriding fixed amount from discount  # noqa: E501

        :return: The amount of this CreateSubscriptionDiscount.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreateSubscriptionDiscount.

        Optional overriding fixed amount from discount  # noqa: E501

        :param amount: The amount of this CreateSubscriptionDiscount.  # noqa: E501
        :type: int
        """
        if amount is not None and amount < 1:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `1`")  # noqa: E501

        self._amount = amount

    @property
    def percentage(self):
        """Gets the percentage of this CreateSubscriptionDiscount.  # noqa: E501

        Optional percentage overriding percentage from discount  # noqa: E501

        :return: The percentage of this CreateSubscriptionDiscount.  # noqa: E501
        :rtype: int
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this CreateSubscriptionDiscount.

        Optional percentage overriding percentage from discount  # noqa: E501

        :param percentage: The percentage of this CreateSubscriptionDiscount.  # noqa: E501
        :type: int
        """
        if percentage is not None and percentage > 100:  # noqa: E501
            raise ValueError("Invalid value for `percentage`, must be a value less than or equal to `100`")  # noqa: E501
        if percentage is not None and percentage < 1:  # noqa: E501
            raise ValueError("Invalid value for `percentage`, must be a value greater than or equal to `1`")  # noqa: E501

        self._percentage = percentage

    @property
    def apply_to(self):
        """Gets the apply_to of this CreateSubscriptionDiscount.  # noqa: E501

        Optional overriding discount settings  # noqa: E501

        :return: The apply_to of this CreateSubscriptionDiscount.  # noqa: E501
        :rtype: list[str]
        """
        return self._apply_to

    @apply_to.setter
    def apply_to(self, apply_to):
        """Sets the apply_to of this CreateSubscriptionDiscount.

        Optional overriding discount settings  # noqa: E501

        :param apply_to: The apply_to of this CreateSubscriptionDiscount.  # noqa: E501
        :type: list[str]
        """

        self._apply_to = apply_to

    @property
    def fixed_count(self):
        """Gets the fixed_count of this CreateSubscriptionDiscount.  # noqa: E501

        Optional overriding discount settings  # noqa: E501

        :return: The fixed_count of this CreateSubscriptionDiscount.  # noqa: E501
        :rtype: int
        """
        return self._fixed_count

    @fixed_count.setter
    def fixed_count(self, fixed_count):
        """Sets the fixed_count of this CreateSubscriptionDiscount.

        Optional overriding discount settings  # noqa: E501

        :param fixed_count: The fixed_count of this CreateSubscriptionDiscount.  # noqa: E501
        :type: int
        """
        if fixed_count is not None and fixed_count < 1:  # noqa: E501
            raise ValueError("Invalid value for `fixed_count`, must be a value greater than or equal to `1`")  # noqa: E501

        self._fixed_count = fixed_count

    @property
    def fixed_period_unit(self):
        """Gets the fixed_period_unit of this CreateSubscriptionDiscount.  # noqa: E501

        Optional overriding discount settings  # noqa: E501

        :return: The fixed_period_unit of this CreateSubscriptionDiscount.  # noqa: E501
        :rtype: str
        """
        return self._fixed_period_unit

    @fixed_period_unit.setter
    def fixed_period_unit(self, fixed_period_unit):
        """Sets the fixed_period_unit of this CreateSubscriptionDiscount.

        Optional overriding discount settings  # noqa: E501

        :param fixed_period_unit: The fixed_period_unit of this CreateSubscriptionDiscount.  # noqa: E501
        :type: str
        """
        allowed_values = ["months", "days"]  # noqa: E501
        if fixed_period_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `fixed_period_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(fixed_period_unit, allowed_values)
            )

        self._fixed_period_unit = fixed_period_unit

    @property
    def fixed_period(self):
        """Gets the fixed_period of this CreateSubscriptionDiscount.  # noqa: E501

        Optional overriding discount settings  # noqa: E501

        :return: The fixed_period of this CreateSubscriptionDiscount.  # noqa: E501
        :rtype: int
        """
        return self._fixed_period

    @fixed_period.setter
    def fixed_period(self, fixed_period):
        """Sets the fixed_period of this CreateSubscriptionDiscount.

        Optional overriding discount settings  # noqa: E501

        :param fixed_period: The fixed_period of this CreateSubscriptionDiscount.  # noqa: E501
        :type: int
        """
        if fixed_period is not None and fixed_period < 1:  # noqa: E501
            raise ValueError("Invalid value for `fixed_period`, must be a value greater than or equal to `1`")  # noqa: E501

        self._fixed_period = fixed_period

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateSubscriptionDiscount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateSubscriptionDiscount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
