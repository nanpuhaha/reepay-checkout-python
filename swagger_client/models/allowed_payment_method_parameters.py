# coding: utf-8

"""
    Reepay Checkout API

    Reepay Checkout REST API  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AllowedPaymentMethodParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allowed_auth_methods': 'list[str]',
        'allowed_card_networks': 'list[str]'
    }

    attribute_map = {
        'allowed_auth_methods': 'allowedAuthMethods',
        'allowed_card_networks': 'allowedCardNetworks'
    }

    def __init__(self, allowed_auth_methods=None, allowed_card_networks=None):  # noqa: E501
        """AllowedPaymentMethodParameters - a model defined in Swagger"""  # noqa: E501

        self._allowed_auth_methods = None
        self._allowed_card_networks = None
        self.discriminator = None

        if allowed_auth_methods is not None:
            self.allowed_auth_methods = allowed_auth_methods
        if allowed_card_networks is not None:
            self.allowed_card_networks = allowed_card_networks

    @property
    def allowed_auth_methods(self):
        """Gets the allowed_auth_methods of this AllowedPaymentMethodParameters.  # noqa: E501


        :return: The allowed_auth_methods of this AllowedPaymentMethodParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_auth_methods

    @allowed_auth_methods.setter
    def allowed_auth_methods(self, allowed_auth_methods):
        """Sets the allowed_auth_methods of this AllowedPaymentMethodParameters.


        :param allowed_auth_methods: The allowed_auth_methods of this AllowedPaymentMethodParameters.  # noqa: E501
        :type: list[str]
        """

        self._allowed_auth_methods = allowed_auth_methods

    @property
    def allowed_card_networks(self):
        """Gets the allowed_card_networks of this AllowedPaymentMethodParameters.  # noqa: E501


        :return: The allowed_card_networks of this AllowedPaymentMethodParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_card_networks

    @allowed_card_networks.setter
    def allowed_card_networks(self, allowed_card_networks):
        """Sets the allowed_card_networks of this AllowedPaymentMethodParameters.


        :param allowed_card_networks: The allowed_card_networks of this AllowedPaymentMethodParameters.  # noqa: E501
        :type: list[str]
        """

        self._allowed_card_networks = allowed_card_networks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AllowedPaymentMethodParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        return (
            self.__dict__ == other.__dict__
            if isinstance(other, AllowedPaymentMethodParameters)
            else False
        )

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
