# coding: utf-8

"""
    Reepay Checkout API

    Reepay Checkout REST API  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Invoice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'handle': 'str',
        'customer': 'str',
        'subscription': 'str',
        'plan': 'str',
        'state': 'str',
        'type': 'str',
        'amount': 'int',
        'number': 'int',
        'currency': 'str',
        'due': 'datetime',
        'failed': 'datetime',
        'settled': 'datetime',
        'cancelled': 'datetime',
        'authorized': 'datetime',
        'credits': 'list[CreditInvoice]',
        'created': 'datetime',
        'plan_version': 'int',
        'dunning_plan': 'str',
        'discount_amount': 'int',
        'org_amount': 'int',
        'amount_vat': 'int',
        'amount_ex_vat': 'int',
        'settled_amount': 'int',
        'refunded_amount': 'int',
        'authorized_amount': 'int',
        'credited_amount': 'int',
        'period_number': 'int',
        'order_lines': 'list[OrderLine]',
        'additional_costs': 'list[str]',
        'transactions': 'list[Transaction]',
        'credit_notes': 'list[InvoiceCreditNote]',
        'dunning_start': 'datetime',
        'dunning_count': 'int',
        'dunning_expired': 'datetime',
        'period_from': 'datetime',
        'period_to': 'datetime',
        'settle_later': 'bool',
        'settle_later_payment_method': 'str',
        'billing_address': 'InvoiceBillingAddress',
        'shipping_address': 'InvoiceShippingAddress'
    }

    attribute_map = {
        'id': 'id',
        'handle': 'handle',
        'customer': 'customer',
        'subscription': 'subscription',
        'plan': 'plan',
        'state': 'state',
        'type': 'type',
        'amount': 'amount',
        'number': 'number',
        'currency': 'currency',
        'due': 'due',
        'failed': 'failed',
        'settled': 'settled',
        'cancelled': 'cancelled',
        'authorized': 'authorized',
        'credits': 'credits',
        'created': 'created',
        'plan_version': 'plan_version',
        'dunning_plan': 'dunning_plan',
        'discount_amount': 'discount_amount',
        'org_amount': 'org_amount',
        'amount_vat': 'amount_vat',
        'amount_ex_vat': 'amount_ex_vat',
        'settled_amount': 'settled_amount',
        'refunded_amount': 'refunded_amount',
        'authorized_amount': 'authorized_amount',
        'credited_amount': 'credited_amount',
        'period_number': 'period_number',
        'order_lines': 'order_lines',
        'additional_costs': 'additional_costs',
        'transactions': 'transactions',
        'credit_notes': 'credit_notes',
        'dunning_start': 'dunning_start',
        'dunning_count': 'dunning_count',
        'dunning_expired': 'dunning_expired',
        'period_from': 'period_from',
        'period_to': 'period_to',
        'settle_later': 'settle_later',
        'settle_later_payment_method': 'settle_later_payment_method',
        'billing_address': 'billing_address',
        'shipping_address': 'shipping_address'
    }

    def __init__(self, id=None, handle=None, customer=None, subscription=None, plan=None, state=None, type=None, amount=None, number=None, currency=None, due=None, failed=None, settled=None, cancelled=None, authorized=None, credits=None, created=None, plan_version=None, dunning_plan=None, discount_amount=None, org_amount=None, amount_vat=None, amount_ex_vat=None, settled_amount=None, refunded_amount=None, authorized_amount=None, credited_amount=None, period_number=None, order_lines=None, additional_costs=None, transactions=None, credit_notes=None, dunning_start=None, dunning_count=None, dunning_expired=None, period_from=None, period_to=None, settle_later=None, settle_later_payment_method=None, billing_address=None, shipping_address=None):  # noqa: E501
        """Invoice - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._handle = None
        self._customer = None
        self._subscription = None
        self._plan = None
        self._state = None
        self._type = None
        self._amount = None
        self._number = None
        self._currency = None
        self._due = None
        self._failed = None
        self._settled = None
        self._cancelled = None
        self._authorized = None
        self._credits = None
        self._created = None
        self._plan_version = None
        self._dunning_plan = None
        self._discount_amount = None
        self._org_amount = None
        self._amount_vat = None
        self._amount_ex_vat = None
        self._settled_amount = None
        self._refunded_amount = None
        self._authorized_amount = None
        self._credited_amount = None
        self._period_number = None
        self._order_lines = None
        self._additional_costs = None
        self._transactions = None
        self._credit_notes = None
        self._dunning_start = None
        self._dunning_count = None
        self._dunning_expired = None
        self._period_from = None
        self._period_to = None
        self._settle_later = None
        self._settle_later_payment_method = None
        self._billing_address = None
        self._shipping_address = None
        self.discriminator = None

        self.id = id
        self.handle = handle
        self.customer = customer
        if subscription is not None:
            self.subscription = subscription
        if plan is not None:
            self.plan = plan
        self.state = state
        self.type = type
        self.amount = amount
        self.number = number
        self.currency = currency
        self.due = due
        if failed is not None:
            self.failed = failed
        if settled is not None:
            self.settled = settled
        if cancelled is not None:
            self.cancelled = cancelled
        if authorized is not None:
            self.authorized = authorized
        self.credits = credits
        self.created = created
        if plan_version is not None:
            self.plan_version = plan_version
        if dunning_plan is not None:
            self.dunning_plan = dunning_plan
        self.discount_amount = discount_amount
        self.org_amount = org_amount
        self.amount_vat = amount_vat
        self.amount_ex_vat = amount_ex_vat
        self.settled_amount = settled_amount
        self.refunded_amount = refunded_amount
        if authorized_amount is not None:
            self.authorized_amount = authorized_amount
        if credited_amount is not None:
            self.credited_amount = credited_amount
        if period_number is not None:
            self.period_number = period_number
        self.order_lines = order_lines
        self.additional_costs = additional_costs
        self.transactions = transactions
        if credit_notes is not None:
            self.credit_notes = credit_notes
        if dunning_start is not None:
            self.dunning_start = dunning_start
        if dunning_count is not None:
            self.dunning_count = dunning_count
        if dunning_expired is not None:
            self.dunning_expired = dunning_expired
        if period_from is not None:
            self.period_from = period_from
        if period_to is not None:
            self.period_to = period_to
        if settle_later is not None:
            self.settle_later = settle_later
        if settle_later_payment_method is not None:
            self.settle_later_payment_method = settle_later_payment_method
        if billing_address is not None:
            self.billing_address = billing_address
        if shipping_address is not None:
            self.shipping_address = shipping_address

    @property
    def id(self):
        """Gets the id of this Invoice.  # noqa: E501

        Invoice id assigned by Reepay  # noqa: E501

        :return: The id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Invoice.

        Invoice id assigned by Reepay  # noqa: E501

        :param id: The id of this Invoice.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def handle(self):
        """Gets the handle of this Invoice.  # noqa: E501

        Per account unique handle. Provided at on-demand invoice/charge creation or set to `inv-<invoice_number>` for automatically created subscription invoices  # noqa: E501

        :return: The handle of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._handle

    @handle.setter
    def handle(self, handle):
        """Sets the handle of this Invoice.

        Per account unique handle. Provided at on-demand invoice/charge creation or set to `inv-<invoice_number>` for automatically created subscription invoices  # noqa: E501

        :param handle: The handle of this Invoice.  # noqa: E501
        :type: str
        """
        if handle is None:
            raise ValueError("Invalid value for `handle`, must not be `None`")  # noqa: E501

        self._handle = handle

    @property
    def customer(self):
        """Gets the customer of this Invoice.  # noqa: E501

        Customer handle  # noqa: E501

        :return: The customer of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this Invoice.

        Customer handle  # noqa: E501

        :param customer: The customer of this Invoice.  # noqa: E501
        :type: str
        """
        if customer is None:
            raise ValueError("Invalid value for `customer`, must not be `None`")  # noqa: E501

        self._customer = customer

    @property
    def subscription(self):
        """Gets the subscription of this Invoice.  # noqa: E501

        Subscription handle, will be null for a one-time customer invoice  # noqa: E501

        :return: The subscription of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this Invoice.

        Subscription handle, will be null for a one-time customer invoice  # noqa: E501

        :param subscription: The subscription of this Invoice.  # noqa: E501
        :type: str
        """

        self._subscription = subscription

    @property
    def plan(self):
        """Gets the plan of this Invoice.  # noqa: E501

        Subscription plan handle for the plan used to automatically create the invoice or the case that an on-demand subscription invoice has been created that should include a plan order line  # noqa: E501

        :return: The plan of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this Invoice.

        Subscription plan handle for the plan used to automatically create the invoice or the case that an on-demand subscription invoice has been created that should include a plan order line  # noqa: E501

        :param plan: The plan of this Invoice.  # noqa: E501
        :type: str
        """

        self._plan = plan

    @property
    def state(self):
        """Gets the state of this Invoice.  # noqa: E501

        The invoice state one of the following: `created`, `pending`, `dunning`, `settled`, `cancelled`, `authorized`, `failed`  # noqa: E501

        :return: The state of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Invoice.

        The invoice state one of the following: `created`, `pending`, `dunning`, `settled`, `cancelled`, `authorized`, `failed`  # noqa: E501

        :param state: The state of this Invoice.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["created", "pending", "dunning", "settled", "authorized", "cancelled", "failed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type(self):
        """Gets the type of this Invoice.  # noqa: E501

        The type of invoice: `s` - subscription recurring, `so` - subscription one-time, `soi` - subscription one-time instant, `co` - customer one-time, `ch` - charge  # noqa: E501

        :return: The type of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Invoice.

        The type of invoice: `s` - subscription recurring, `so` - subscription one-time, `soi` - subscription one-time instant, `co` - customer one-time, `ch` - charge  # noqa: E501

        :param type: The type of this Invoice.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["s", "so", "soi", "co", "ch"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def amount(self):
        """Gets the amount of this Invoice.  # noqa: E501

        The invoice amount including VAT  # noqa: E501

        :return: The amount of this Invoice.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Invoice.

        The invoice amount including VAT  # noqa: E501

        :param amount: The amount of this Invoice.  # noqa: E501
        :type: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501
        if amount is not None and amount < 0:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `0`")  # noqa: E501

        self._amount = amount

    @property
    def number(self):
        """Gets the number of this Invoice.  # noqa: E501

        Sequential invoice number  # noqa: E501

        :return: The number of this Invoice.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Invoice.

        Sequential invoice number  # noqa: E501

        :param number: The number of this Invoice.  # noqa: E501
        :type: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501
        if number is not None and number < 1:  # noqa: E501
            raise ValueError("Invalid value for `number`, must be a value greater than or equal to `1`")  # noqa: E501

        self._number = number

    @property
    def currency(self):
        """Gets the currency of this Invoice.  # noqa: E501

        Currency for the account in [ISO 4217](http://da.wikipedia.org/wiki/ISO_4217) three letter alpha code  # noqa: E501

        :return: The currency of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Invoice.

        Currency for the account in [ISO 4217](http://da.wikipedia.org/wiki/ISO_4217) three letter alpha code  # noqa: E501

        :param currency: The currency of this Invoice.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def due(self):
        """Gets the due of this Invoice.  # noqa: E501

        When is the invoice due, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :return: The due of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._due

    @due.setter
    def due(self, due):
        """Sets the due of this Invoice.

        When is the invoice due, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :param due: The due of this Invoice.  # noqa: E501
        :type: datetime
        """
        if due is None:
            raise ValueError("Invalid value for `due`, must not be `None`")  # noqa: E501

        self._due = due

    @property
    def failed(self):
        """Gets the failed of this Invoice.  # noqa: E501

        When the invoice failed, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :return: The failed of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this Invoice.

        When the invoice failed, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :param failed: The failed of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._failed = failed

    @property
    def settled(self):
        """Gets the settled of this Invoice.  # noqa: E501

        When the invoice settled, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :return: The settled of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._settled

    @settled.setter
    def settled(self, settled):
        """Sets the settled of this Invoice.

        When the invoice settled, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :param settled: The settled of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._settled = settled

    @property
    def cancelled(self):
        """Gets the cancelled of this Invoice.  # noqa: E501

        When the invoice was cancelled, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :return: The cancelled of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._cancelled

    @cancelled.setter
    def cancelled(self, cancelled):
        """Sets the cancelled of this Invoice.

        When the invoice was cancelled, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :param cancelled: The cancelled of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._cancelled = cancelled

    @property
    def authorized(self):
        """Gets the authorized of this Invoice.  # noqa: E501

        When the invoice was authorized, if the invoice went through an authorize and settle flow, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :return: The authorized of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._authorized

    @authorized.setter
    def authorized(self, authorized):
        """Sets the authorized of this Invoice.

        When the invoice was authorized, if the invoice went through an authorize and settle flow, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :param authorized: The authorized of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._authorized = authorized

    @property
    def credits(self):
        """Gets the credits of this Invoice.  # noqa: E501

        Credits applied to invoice  # noqa: E501

        :return: The credits of this Invoice.  # noqa: E501
        :rtype: list[CreditInvoice]
        """
        return self._credits

    @credits.setter
    def credits(self, credits):
        """Sets the credits of this Invoice.

        Credits applied to invoice  # noqa: E501

        :param credits: The credits of this Invoice.  # noqa: E501
        :type: list[CreditInvoice]
        """
        if credits is None:
            raise ValueError("Invalid value for `credits`, must not be `None`")  # noqa: E501

        self._credits = credits

    @property
    def created(self):
        """Gets the created of this Invoice.  # noqa: E501

        When the invoice was created, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :return: The created of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Invoice.

        When the invoice was created, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :param created: The created of this Invoice.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def plan_version(self):
        """Gets the plan_version of this Invoice.  # noqa: E501

        Subscription plan version  # noqa: E501

        :return: The plan_version of this Invoice.  # noqa: E501
        :rtype: int
        """
        return self._plan_version

    @plan_version.setter
    def plan_version(self, plan_version):
        """Sets the plan_version of this Invoice.

        Subscription plan version  # noqa: E501

        :param plan_version: The plan_version of this Invoice.  # noqa: E501
        :type: int
        """

        self._plan_version = plan_version

    @property
    def dunning_plan(self):
        """Gets the dunning_plan of this Invoice.  # noqa: E501

        Dunning plan handle  # noqa: E501

        :return: The dunning_plan of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._dunning_plan

    @dunning_plan.setter
    def dunning_plan(self, dunning_plan):
        """Sets the dunning_plan of this Invoice.

        Dunning plan handle  # noqa: E501

        :param dunning_plan: The dunning_plan of this Invoice.  # noqa: E501
        :type: str
        """

        self._dunning_plan = dunning_plan

    @property
    def discount_amount(self):
        """Gets the discount_amount of this Invoice.  # noqa: E501

        The potential discount amount deducted from the invoice amount including VAT  # noqa: E501

        :return: The discount_amount of this Invoice.  # noqa: E501
        :rtype: int
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """Sets the discount_amount of this Invoice.

        The potential discount amount deducted from the invoice amount including VAT  # noqa: E501

        :param discount_amount: The discount_amount of this Invoice.  # noqa: E501
        :type: int
        """
        if discount_amount is None:
            raise ValueError("Invalid value for `discount_amount`, must not be `None`")  # noqa: E501
        if discount_amount is not None and discount_amount < 0:  # noqa: E501
            raise ValueError("Invalid value for `discount_amount`, must be a value greater than or equal to `0`")  # noqa: E501

        self._discount_amount = discount_amount

    @property
    def org_amount(self):
        """Gets the org_amount of this Invoice.  # noqa: E501

        The invoice original amount including VAT, may differ from amount if adjustments have been applied for the invoice  # noqa: E501

        :return: The org_amount of this Invoice.  # noqa: E501
        :rtype: int
        """
        return self._org_amount

    @org_amount.setter
    def org_amount(self, org_amount):
        """Sets the org_amount of this Invoice.

        The invoice original amount including VAT, may differ from amount if adjustments have been applied for the invoice  # noqa: E501

        :param org_amount: The org_amount of this Invoice.  # noqa: E501
        :type: int
        """
        if org_amount is None:
            raise ValueError("Invalid value for `org_amount`, must not be `None`")  # noqa: E501
        if org_amount is not None and org_amount < 0:  # noqa: E501
            raise ValueError("Invalid value for `org_amount`, must be a value greater than or equal to `0`")  # noqa: E501

        self._org_amount = org_amount

    @property
    def amount_vat(self):
        """Gets the amount_vat of this Invoice.  # noqa: E501

        The invoice vat amount calculated as rounded summed fractional vats for each orderline  # noqa: E501

        :return: The amount_vat of this Invoice.  # noqa: E501
        :rtype: int
        """
        return self._amount_vat

    @amount_vat.setter
    def amount_vat(self, amount_vat):
        """Sets the amount_vat of this Invoice.

        The invoice vat amount calculated as rounded summed fractional vats for each orderline  # noqa: E501

        :param amount_vat: The amount_vat of this Invoice.  # noqa: E501
        :type: int
        """
        if amount_vat is None:
            raise ValueError("Invalid value for `amount_vat`, must not be `None`")  # noqa: E501

        self._amount_vat = amount_vat

    @property
    def amount_ex_vat(self):
        """Gets the amount_ex_vat of this Invoice.  # noqa: E501

        The invoice amount without vat  # noqa: E501

        :return: The amount_ex_vat of this Invoice.  # noqa: E501
        :rtype: int
        """
        return self._amount_ex_vat

    @amount_ex_vat.setter
    def amount_ex_vat(self, amount_ex_vat):
        """Sets the amount_ex_vat of this Invoice.

        The invoice amount without vat  # noqa: E501

        :param amount_ex_vat: The amount_ex_vat of this Invoice.  # noqa: E501
        :type: int
        """
        if amount_ex_vat is None:
            raise ValueError("Invalid value for `amount_ex_vat`, must not be `None`")  # noqa: E501

        self._amount_ex_vat = amount_ex_vat

    @property
    def settled_amount(self):
        """Gets the settled_amount of this Invoice.  # noqa: E501

        Settled amount  # noqa: E501

        :return: The settled_amount of this Invoice.  # noqa: E501
        :rtype: int
        """
        return self._settled_amount

    @settled_amount.setter
    def settled_amount(self, settled_amount):
        """Sets the settled_amount of this Invoice.

        Settled amount  # noqa: E501

        :param settled_amount: The settled_amount of this Invoice.  # noqa: E501
        :type: int
        """
        if settled_amount is None:
            raise ValueError("Invalid value for `settled_amount`, must not be `None`")  # noqa: E501

        self._settled_amount = settled_amount

    @property
    def refunded_amount(self):
        """Gets the refunded_amount of this Invoice.  # noqa: E501

        Refunded amount  # noqa: E501

        :return: The refunded_amount of this Invoice.  # noqa: E501
        :rtype: int
        """
        return self._refunded_amount

    @refunded_amount.setter
    def refunded_amount(self, refunded_amount):
        """Sets the refunded_amount of this Invoice.

        Refunded amount  # noqa: E501

        :param refunded_amount: The refunded_amount of this Invoice.  # noqa: E501
        :type: int
        """
        if refunded_amount is None:
            raise ValueError("Invalid value for `refunded_amount`, must not be `None`")  # noqa: E501

        self._refunded_amount = refunded_amount

    @property
    def authorized_amount(self):
        """Gets the authorized_amount of this Invoice.  # noqa: E501

        Authorized amount  # noqa: E501

        :return: The authorized_amount of this Invoice.  # noqa: E501
        :rtype: int
        """
        return self._authorized_amount

    @authorized_amount.setter
    def authorized_amount(self, authorized_amount):
        """Sets the authorized_amount of this Invoice.

        Authorized amount  # noqa: E501

        :param authorized_amount: The authorized_amount of this Invoice.  # noqa: E501
        :type: int
        """

        self._authorized_amount = authorized_amount

    @property
    def credited_amount(self):
        """Gets the credited_amount of this Invoice.  # noqa: E501

        Credited amount  # noqa: E501

        :return: The credited_amount of this Invoice.  # noqa: E501
        :rtype: int
        """
        return self._credited_amount

    @credited_amount.setter
    def credited_amount(self, credited_amount):
        """Sets the credited_amount of this Invoice.

        Credited amount  # noqa: E501

        :param credited_amount: The credited_amount of this Invoice.  # noqa: E501
        :type: int
        """

        self._credited_amount = credited_amount

    @property
    def period_number(self):
        """Gets the period_number of this Invoice.  # noqa: E501

        The subscription period this invoice is for  # noqa: E501

        :return: The period_number of this Invoice.  # noqa: E501
        :rtype: int
        """
        return self._period_number

    @period_number.setter
    def period_number(self, period_number):
        """Sets the period_number of this Invoice.

        The subscription period this invoice is for  # noqa: E501

        :param period_number: The period_number of this Invoice.  # noqa: E501
        :type: int
        """

        self._period_number = period_number

    @property
    def order_lines(self):
        """Gets the order_lines of this Invoice.  # noqa: E501

        Order lines for invoice sorted by descending timestamp  # noqa: E501

        :return: The order_lines of this Invoice.  # noqa: E501
        :rtype: list[OrderLine]
        """
        return self._order_lines

    @order_lines.setter
    def order_lines(self, order_lines):
        """Sets the order_lines of this Invoice.

        Order lines for invoice sorted by descending timestamp  # noqa: E501

        :param order_lines: The order_lines of this Invoice.  # noqa: E501
        :type: list[OrderLine]
        """
        if order_lines is None:
            raise ValueError("Invalid value for `order_lines`, must not be `None`")  # noqa: E501

        self._order_lines = order_lines

    @property
    def additional_costs(self):
        """Gets the additional_costs of this Invoice.  # noqa: E501

        Additional costs for invoice  # noqa: E501

        :return: The additional_costs of this Invoice.  # noqa: E501
        :rtype: list[str]
        """
        return self._additional_costs

    @additional_costs.setter
    def additional_costs(self, additional_costs):
        """Sets the additional_costs of this Invoice.

        Additional costs for invoice  # noqa: E501

        :param additional_costs: The additional_costs of this Invoice.  # noqa: E501
        :type: list[str]
        """
        if additional_costs is None:
            raise ValueError("Invalid value for `additional_costs`, must not be `None`")  # noqa: E501

        self._additional_costs = additional_costs

    @property
    def transactions(self):
        """Gets the transactions of this Invoice.  # noqa: E501

        Invoice transactions  # noqa: E501

        :return: The transactions of this Invoice.  # noqa: E501
        :rtype: list[Transaction]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this Invoice.

        Invoice transactions  # noqa: E501

        :param transactions: The transactions of this Invoice.  # noqa: E501
        :type: list[Transaction]
        """
        if transactions is None:
            raise ValueError("Invalid value for `transactions`, must not be `None`")  # noqa: E501

        self._transactions = transactions

    @property
    def credit_notes(self):
        """Gets the credit_notes of this Invoice.  # noqa: E501

        Invoice credit notes  # noqa: E501

        :return: The credit_notes of this Invoice.  # noqa: E501
        :rtype: list[InvoiceCreditNote]
        """
        return self._credit_notes

    @credit_notes.setter
    def credit_notes(self, credit_notes):
        """Sets the credit_notes of this Invoice.

        Invoice credit notes  # noqa: E501

        :param credit_notes: The credit_notes of this Invoice.  # noqa: E501
        :type: list[InvoiceCreditNote]
        """

        self._credit_notes = credit_notes

    @property
    def dunning_start(self):
        """Gets the dunning_start of this Invoice.  # noqa: E501

        When dunning for the invoice was started, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :return: The dunning_start of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._dunning_start

    @dunning_start.setter
    def dunning_start(self, dunning_start):
        """Sets the dunning_start of this Invoice.

        When dunning for the invoice was started, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :param dunning_start: The dunning_start of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._dunning_start = dunning_start

    @property
    def dunning_count(self):
        """Gets the dunning_count of this Invoice.  # noqa: E501

        Number of dunning events for invoice (number of reminders sent)  # noqa: E501

        :return: The dunning_count of this Invoice.  # noqa: E501
        :rtype: int
        """
        return self._dunning_count

    @dunning_count.setter
    def dunning_count(self, dunning_count):
        """Sets the dunning_count of this Invoice.

        Number of dunning events for invoice (number of reminders sent)  # noqa: E501

        :param dunning_count: The dunning_count of this Invoice.  # noqa: E501
        :type: int
        """

        self._dunning_count = dunning_count

    @property
    def dunning_expired(self):
        """Gets the dunning_expired of this Invoice.  # noqa: E501

        When dunning for the invoice expired, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :return: The dunning_expired of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._dunning_expired

    @dunning_expired.setter
    def dunning_expired(self, dunning_expired):
        """Sets the dunning_expired of this Invoice.

        When dunning for the invoice expired, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :param dunning_expired: The dunning_expired of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._dunning_expired = dunning_expired

    @property
    def period_from(self):
        """Gets the period_from of this Invoice.  # noqa: E501

        The start of billing period if the invoice is for a specific billing period, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :return: The period_from of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._period_from

    @period_from.setter
    def period_from(self, period_from):
        """Sets the period_from of this Invoice.

        The start of billing period if the invoice is for a specific billing period, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :param period_from: The period_from of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._period_from = period_from

    @property
    def period_to(self):
        """Gets the period_to of this Invoice.  # noqa: E501

        The end of billing period if the invoice is for a specific billing period, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :return: The period_to of this Invoice.  # noqa: E501
        :rtype: datetime
        """
        return self._period_to

    @period_to.setter
    def period_to(self, period_to):
        """Sets the period_to of this Invoice.

        The end of billing period if the invoice is for a specific billing period, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :param period_to: The period_to of this Invoice.  # noqa: E501
        :type: datetime
        """

        self._period_to = period_to

    @property
    def settle_later(self):
        """Gets the settle_later of this Invoice.  # noqa: E501

        Whether this is a customer one-time invoice that will be settled later  # noqa: E501

        :return: The settle_later of this Invoice.  # noqa: E501
        :rtype: bool
        """
        return self._settle_later

    @settle_later.setter
    def settle_later(self, settle_later):
        """Sets the settle_later of this Invoice.

        Whether this is a customer one-time invoice that will be settled later  # noqa: E501

        :param settle_later: The settle_later of this Invoice.  # noqa: E501
        :type: bool
        """

        self._settle_later = settle_later

    @property
    def settle_later_payment_method(self):
        """Gets the settle_later_payment_method of this Invoice.  # noqa: E501

        The payment method to use for a later settle of a one-time customer invoice  # noqa: E501

        :return: The settle_later_payment_method of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._settle_later_payment_method

    @settle_later_payment_method.setter
    def settle_later_payment_method(self, settle_later_payment_method):
        """Sets the settle_later_payment_method of this Invoice.

        The payment method to use for a later settle of a one-time customer invoice  # noqa: E501

        :param settle_later_payment_method: The settle_later_payment_method of this Invoice.  # noqa: E501
        :type: str
        """

        self._settle_later_payment_method = settle_later_payment_method

    @property
    def billing_address(self):
        """Gets the billing_address of this Invoice.  # noqa: E501

        Optional billing address  # noqa: E501

        :return: The billing_address of this Invoice.  # noqa: E501
        :rtype: InvoiceBillingAddress
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this Invoice.

        Optional billing address  # noqa: E501

        :param billing_address: The billing_address of this Invoice.  # noqa: E501
        :type: InvoiceBillingAddress
        """

        self._billing_address = billing_address

    @property
    def shipping_address(self):
        """Gets the shipping_address of this Invoice.  # noqa: E501

        Optional shipping address  # noqa: E501

        :return: The shipping_address of this Invoice.  # noqa: E501
        :rtype: InvoiceShippingAddress
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this Invoice.

        Optional shipping address  # noqa: E501

        :param shipping_address: The shipping_address of this Invoice.  # noqa: E501
        :type: InvoiceShippingAddress
        """

        self._shipping_address = shipping_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Invoice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Invoice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
