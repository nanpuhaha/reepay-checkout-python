# coding: utf-8

"""
    Reepay Checkout API

    Reepay Checkout REST API  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Transaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'state': 'str',
        'invoice': 'str',
        'type': 'str',
        'amount': 'int',
        'settled': 'datetime',
        'authorized': 'datetime',
        'failed': 'datetime',
        'refunded': 'datetime',
        'created': 'datetime',
        'card_transaction': 'CardTransaction',
        'mpo_transaction': 'CardTransaction',
        'applepay_transaction': 'CardTransaction',
        'googlepay_transaction': 'CardTransaction',
        'manual_transaction': 'ManualTransaction',
        'viabill_transaction': 'ViabillTransaction',
        'resurs_transaction': 'ResursTransaction',
        'paypal_transaction': 'PaypalTransaction',
        'pgw_transaction': 'PgwTransaction'
    }

    attribute_map = {
        'id': 'id',
        'state': 'state',
        'invoice': 'invoice',
        'type': 'type',
        'amount': 'amount',
        'settled': 'settled',
        'authorized': 'authorized',
        'failed': 'failed',
        'refunded': 'refunded',
        'created': 'created',
        'card_transaction': 'card_transaction',
        'mpo_transaction': 'mpo_transaction',
        'applepay_transaction': 'applepay_transaction',
        'googlepay_transaction': 'googlepay_transaction',
        'manual_transaction': 'manual_transaction',
        'viabill_transaction': 'viabill_transaction',
        'resurs_transaction': 'resurs_transaction',
        'paypal_transaction': 'paypal_transaction',
        'pgw_transaction': 'pgw_transaction'
    }

    def __init__(self, id=None, state=None, invoice=None, type=None, amount=None, settled=None, authorized=None, failed=None, refunded=None, created=None, card_transaction=None, mpo_transaction=None, applepay_transaction=None, googlepay_transaction=None, manual_transaction=None, viabill_transaction=None, resurs_transaction=None, paypal_transaction=None, pgw_transaction=None):  # noqa: E501
        """Transaction - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._state = None
        self._invoice = None
        self._type = None
        self._amount = None
        self._settled = None
        self._authorized = None
        self._failed = None
        self._refunded = None
        self._created = None
        self._card_transaction = None
        self._mpo_transaction = None
        self._applepay_transaction = None
        self._googlepay_transaction = None
        self._manual_transaction = None
        self._viabill_transaction = None
        self._resurs_transaction = None
        self._paypal_transaction = None
        self._pgw_transaction = None
        self.discriminator = None

        self.id = id
        self.state = state
        self.invoice = invoice
        self.type = type
        self.amount = amount
        if settled is not None:
            self.settled = settled
        if authorized is not None:
            self.authorized = authorized
        if failed is not None:
            self.failed = failed
        if refunded is not None:
            self.refunded = refunded
        self.created = created
        if card_transaction is not None:
            self.card_transaction = card_transaction
        if mpo_transaction is not None:
            self.mpo_transaction = mpo_transaction
        if applepay_transaction is not None:
            self.applepay_transaction = applepay_transaction
        if googlepay_transaction is not None:
            self.googlepay_transaction = googlepay_transaction
        if manual_transaction is not None:
            self.manual_transaction = manual_transaction
        if viabill_transaction is not None:
            self.viabill_transaction = viabill_transaction
        if resurs_transaction is not None:
            self.resurs_transaction = resurs_transaction
        if paypal_transaction is not None:
            self.paypal_transaction = paypal_transaction
        if pgw_transaction is not None:
            self.pgw_transaction = pgw_transaction

    @property
    def id(self):
        """Gets the id of this Transaction.  # noqa: E501

        Transaction id assigned by Reepay  # noqa: E501

        :return: The id of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Transaction.

        Transaction id assigned by Reepay  # noqa: E501

        :param id: The id of this Transaction.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def state(self):
        """Gets the state of this Transaction.  # noqa: E501

        State of the transaction, one of the following: `pending`, `processing`, `authorized`, `settled`, `refunded`, `failed`, `cancelled`  # noqa: E501

        :return: The state of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Transaction.

        State of the transaction, one of the following: `pending`, `processing`, `authorized`, `settled`, `refunded`, `failed`, `cancelled`  # noqa: E501

        :param state: The state of this Transaction.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["pending", "processing", "authorized", "settled", "refunded", "failed", "cancelled"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def invoice(self):
        """Gets the invoice of this Transaction.  # noqa: E501

        Invoice id  # noqa: E501

        :return: The invoice of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._invoice

    @invoice.setter
    def invoice(self, invoice):
        """Sets the invoice of this Transaction.

        Invoice id  # noqa: E501

        :param invoice: The invoice of this Transaction.  # noqa: E501
        :type: str
        """
        if invoice is None:
            raise ValueError("Invalid value for `invoice`, must not be `None`")  # noqa: E501

        self._invoice = invoice

    @property
    def type(self):
        """Gets the type of this Transaction.  # noqa: E501

        Transaction type, one of the following: 'settle', 'refund', `authorization`  # noqa: E501

        :return: The type of this Transaction.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Transaction.

        Transaction type, one of the following: 'settle', 'refund', `authorization`  # noqa: E501

        :param type: The type of this Transaction.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["settle", "refund", "authorization"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def amount(self):
        """Gets the amount of this Transaction.  # noqa: E501

        The transaction amount  # noqa: E501

        :return: The amount of this Transaction.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Transaction.

        The transaction amount  # noqa: E501

        :param amount: The amount of this Transaction.  # noqa: E501
        :type: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501
        if amount is not None and amount < 0:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `0`")  # noqa: E501

        self._amount = amount

    @property
    def settled(self):
        """Gets the settled of this Transaction.  # noqa: E501

        When the transaction was settled, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :return: The settled of this Transaction.  # noqa: E501
        :rtype: datetime
        """
        return self._settled

    @settled.setter
    def settled(self, settled):
        """Sets the settled of this Transaction.

        When the transaction was settled, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :param settled: The settled of this Transaction.  # noqa: E501
        :type: datetime
        """

        self._settled = settled

    @property
    def authorized(self):
        """Gets the authorized of this Transaction.  # noqa: E501

        When the transaction was authorized, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :return: The authorized of this Transaction.  # noqa: E501
        :rtype: datetime
        """
        return self._authorized

    @authorized.setter
    def authorized(self, authorized):
        """Sets the authorized of this Transaction.

        When the transaction was authorized, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :param authorized: The authorized of this Transaction.  # noqa: E501
        :type: datetime
        """

        self._authorized = authorized

    @property
    def failed(self):
        """Gets the failed of this Transaction.  # noqa: E501

        When the transaction failed, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :return: The failed of this Transaction.  # noqa: E501
        :rtype: datetime
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this Transaction.

        When the transaction failed, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :param failed: The failed of this Transaction.  # noqa: E501
        :type: datetime
        """

        self._failed = failed

    @property
    def refunded(self):
        """Gets the refunded of this Transaction.  # noqa: E501

        When the transaction was refunded, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :return: The refunded of this Transaction.  # noqa: E501
        :rtype: datetime
        """
        return self._refunded

    @refunded.setter
    def refunded(self, refunded):
        """Sets the refunded of this Transaction.

        When the transaction was refunded, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :param refunded: The refunded of this Transaction.  # noqa: E501
        :type: datetime
        """

        self._refunded = refunded

    @property
    def created(self):
        """Gets the created of this Transaction.  # noqa: E501

        Date when the transaction was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :return: The created of this Transaction.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Transaction.

        Date when the transaction was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :param created: The created of this Transaction.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def card_transaction(self):
        """Gets the card_transaction of this Transaction.  # noqa: E501

        Specifics in case of card transaction  # noqa: E501

        :return: The card_transaction of this Transaction.  # noqa: E501
        :rtype: CardTransaction
        """
        return self._card_transaction

    @card_transaction.setter
    def card_transaction(self, card_transaction):
        """Sets the card_transaction of this Transaction.

        Specifics in case of card transaction  # noqa: E501

        :param card_transaction: The card_transaction of this Transaction.  # noqa: E501
        :type: CardTransaction
        """

        self._card_transaction = card_transaction

    @property
    def mpo_transaction(self):
        """Gets the mpo_transaction of this Transaction.  # noqa: E501

        Specifics in case of MobilePay Online transaction  # noqa: E501

        :return: The mpo_transaction of this Transaction.  # noqa: E501
        :rtype: CardTransaction
        """
        return self._mpo_transaction

    @mpo_transaction.setter
    def mpo_transaction(self, mpo_transaction):
        """Sets the mpo_transaction of this Transaction.

        Specifics in case of MobilePay Online transaction  # noqa: E501

        :param mpo_transaction: The mpo_transaction of this Transaction.  # noqa: E501
        :type: CardTransaction
        """

        self._mpo_transaction = mpo_transaction

    @property
    def applepay_transaction(self):
        """Gets the applepay_transaction of this Transaction.  # noqa: E501

        Specifics in case of ApplePay transaction  # noqa: E501

        :return: The applepay_transaction of this Transaction.  # noqa: E501
        :rtype: CardTransaction
        """
        return self._applepay_transaction

    @applepay_transaction.setter
    def applepay_transaction(self, applepay_transaction):
        """Sets the applepay_transaction of this Transaction.

        Specifics in case of ApplePay transaction  # noqa: E501

        :param applepay_transaction: The applepay_transaction of this Transaction.  # noqa: E501
        :type: CardTransaction
        """

        self._applepay_transaction = applepay_transaction

    @property
    def googlepay_transaction(self):
        """Gets the googlepay_transaction of this Transaction.  # noqa: E501

        Specifics in case of GooglePay transaction  # noqa: E501

        :return: The googlepay_transaction of this Transaction.  # noqa: E501
        :rtype: CardTransaction
        """
        return self._googlepay_transaction

    @googlepay_transaction.setter
    def googlepay_transaction(self, googlepay_transaction):
        """Sets the googlepay_transaction of this Transaction.

        Specifics in case of GooglePay transaction  # noqa: E501

        :param googlepay_transaction: The googlepay_transaction of this Transaction.  # noqa: E501
        :type: CardTransaction
        """

        self._googlepay_transaction = googlepay_transaction

    @property
    def manual_transaction(self):
        """Gets the manual_transaction of this Transaction.  # noqa: E501

        Specifics in case of manual transaction  # noqa: E501

        :return: The manual_transaction of this Transaction.  # noqa: E501
        :rtype: ManualTransaction
        """
        return self._manual_transaction

    @manual_transaction.setter
    def manual_transaction(self, manual_transaction):
        """Sets the manual_transaction of this Transaction.

        Specifics in case of manual transaction  # noqa: E501

        :param manual_transaction: The manual_transaction of this Transaction.  # noqa: E501
        :type: ManualTransaction
        """

        self._manual_transaction = manual_transaction

    @property
    def viabill_transaction(self):
        """Gets the viabill_transaction of this Transaction.  # noqa: E501

        Specifics in case of ViaBill transaction  # noqa: E501

        :return: The viabill_transaction of this Transaction.  # noqa: E501
        :rtype: ViabillTransaction
        """
        return self._viabill_transaction

    @viabill_transaction.setter
    def viabill_transaction(self, viabill_transaction):
        """Sets the viabill_transaction of this Transaction.

        Specifics in case of ViaBill transaction  # noqa: E501

        :param viabill_transaction: The viabill_transaction of this Transaction.  # noqa: E501
        :type: ViabillTransaction
        """

        self._viabill_transaction = viabill_transaction

    @property
    def resurs_transaction(self):
        """Gets the resurs_transaction of this Transaction.  # noqa: E501

        Specifics in case of Resurs Bank transaction  # noqa: E501

        :return: The resurs_transaction of this Transaction.  # noqa: E501
        :rtype: ResursTransaction
        """
        return self._resurs_transaction

    @resurs_transaction.setter
    def resurs_transaction(self, resurs_transaction):
        """Sets the resurs_transaction of this Transaction.

        Specifics in case of Resurs Bank transaction  # noqa: E501

        :param resurs_transaction: The resurs_transaction of this Transaction.  # noqa: E501
        :type: ResursTransaction
        """

        self._resurs_transaction = resurs_transaction

    @property
    def paypal_transaction(self):
        """Gets the paypal_transaction of this Transaction.  # noqa: E501

        Specifics in case of PayPal transaction  # noqa: E501

        :return: The paypal_transaction of this Transaction.  # noqa: E501
        :rtype: PaypalTransaction
        """
        return self._paypal_transaction

    @paypal_transaction.setter
    def paypal_transaction(self, paypal_transaction):
        """Sets the paypal_transaction of this Transaction.

        Specifics in case of PayPal transaction  # noqa: E501

        :param paypal_transaction: The paypal_transaction of this Transaction.  # noqa: E501
        :type: PaypalTransaction
        """

        self._paypal_transaction = paypal_transaction

    @property
    def pgw_transaction(self):
        """Gets the pgw_transaction of this Transaction.  # noqa: E501

        Specifics in case of generic payment gateway transaction  # noqa: E501

        :return: The pgw_transaction of this Transaction.  # noqa: E501
        :rtype: PgwTransaction
        """
        return self._pgw_transaction

    @pgw_transaction.setter
    def pgw_transaction(self, pgw_transaction):
        """Sets the pgw_transaction of this Transaction.

        Specifics in case of generic payment gateway transaction  # noqa: E501

        :param pgw_transaction: The pgw_transaction of this Transaction.  # noqa: E501
        :type: PgwTransaction
        """

        self._pgw_transaction = pgw_transaction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Transaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Transaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
