# coding: utf-8

"""
    Reepay Checkout API

    Reepay Checkout REST API  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ManualTransaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'method': 'str',
        'comment': 'str',
        'reference': 'str',
        'payment_date': 'datetime'
    }

    attribute_map = {
        'method': 'method',
        'comment': 'comment',
        'reference': 'reference',
        'payment_date': 'payment_date'
    }

    def __init__(self, method=None, comment=None, reference=None, payment_date=None):  # noqa: E501
        """ManualTransaction - a model defined in Swagger"""  # noqa: E501

        self._method = None
        self._comment = None
        self._reference = None
        self._payment_date = None
        self.discriminator = None

        self.method = method
        if comment is not None:
            self.comment = comment
        if reference is not None:
            self.reference = reference
        self.payment_date = payment_date

    @property
    def method(self):
        """Gets the method of this ManualTransaction.  # noqa: E501

        The method used for the offline manual transaction, allowable values: `cash`, `bank_transfer`, `check`, `chargeback`, `other`  # noqa: E501

        :return: The method of this ManualTransaction.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this ManualTransaction.

        The method used for the offline manual transaction, allowable values: `cash`, `bank_transfer`, `check`, `chargeback`, `other`  # noqa: E501

        :param method: The method of this ManualTransaction.  # noqa: E501
        :type: str
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")  # noqa: E501
        allowed_values = ["cash", "bank_transfer", "check", "chargeback", "other"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"  # noqa: E501
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def comment(self):
        """Gets the comment of this ManualTransaction.  # noqa: E501

        Optional comment for manual transaction  # noqa: E501

        :return: The comment of this ManualTransaction.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ManualTransaction.

        Optional comment for manual transaction  # noqa: E501

        :param comment: The comment of this ManualTransaction.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def reference(self):
        """Gets the reference of this ManualTransaction.  # noqa: E501

        Optional reference for the manual transaction  # noqa: E501

        :return: The reference of this ManualTransaction.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this ManualTransaction.

        Optional reference for the manual transaction  # noqa: E501

        :param reference: The reference of this ManualTransaction.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def payment_date(self):
        """Gets the payment_date of this ManualTransaction.  # noqa: E501

        When the manual transaction was performed on the form `yyyy-MM-dd`, `yyyyMMdd`, `yyyy-MM-ddTHH:mm` and `yyyy-MM-ddTHH:mm:ss`  # noqa: E501

        :return: The payment_date of this ManualTransaction.  # noqa: E501
        :rtype: datetime
        """
        return self._payment_date

    @payment_date.setter
    def payment_date(self, payment_date):
        """Sets the payment_date of this ManualTransaction.

        When the manual transaction was performed on the form `yyyy-MM-dd`, `yyyyMMdd`, `yyyy-MM-ddTHH:mm` and `yyyy-MM-ddTHH:mm:ss`  # noqa: E501

        :param payment_date: The payment_date of this ManualTransaction.  # noqa: E501
        :type: datetime
        """
        if payment_date is None:
            raise ValueError("Invalid value for `payment_date`, must not be `None`")  # noqa: E501

        self._payment_date = payment_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ManualTransaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ManualTransaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
