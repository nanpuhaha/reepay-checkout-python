# coding: utf-8

"""
    Reepay Checkout API

    Reepay Checkout REST API  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InvoiceCreditNote(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'invoice': 'str',
        'transaction': 'str',
        'credit': 'str',
        'amount': 'int',
        'created': 'datetime',
        'credit_note_lines': 'list[CreditNoteLine]'
    }

    attribute_map = {
        'id': 'id',
        'invoice': 'invoice',
        'transaction': 'transaction',
        'credit': 'credit',
        'amount': 'amount',
        'created': 'created',
        'credit_note_lines': 'credit_note_lines'
    }

    def __init__(self, id=None, invoice=None, transaction=None, credit=None, amount=None, created=None, credit_note_lines=None):  # noqa: E501
        """InvoiceCreditNote - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._invoice = None
        self._transaction = None
        self._credit = None
        self._amount = None
        self._created = None
        self._credit_note_lines = None
        self.discriminator = None

        self.id = id
        self.invoice = invoice
        if transaction is not None:
            self.transaction = transaction
        if credit is not None:
            self.credit = credit
        self.amount = amount
        self.created = created
        self.credit_note_lines = credit_note_lines

    @property
    def id(self):
        """Gets the id of this InvoiceCreditNote.  # noqa: E501

        Credit note id  # noqa: E501

        :return: The id of this InvoiceCreditNote.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InvoiceCreditNote.

        Credit note id  # noqa: E501

        :param id: The id of this InvoiceCreditNote.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def invoice(self):
        """Gets the invoice of this InvoiceCreditNote.  # noqa: E501

        Invoice credited by this note  # noqa: E501

        :return: The invoice of this InvoiceCreditNote.  # noqa: E501
        :rtype: str
        """
        return self._invoice

    @invoice.setter
    def invoice(self, invoice):
        """Sets the invoice of this InvoiceCreditNote.

        Invoice credited by this note  # noqa: E501

        :param invoice: The invoice of this InvoiceCreditNote.  # noqa: E501
        :type: str
        """
        if invoice is None:
            raise ValueError("Invalid value for `invoice`, must not be `None`")  # noqa: E501

        self._invoice = invoice

    @property
    def transaction(self):
        """Gets the transaction of this InvoiceCreditNote.  # noqa: E501

        Refund transaction id if credit note has an associated refund  # noqa: E501

        :return: The transaction of this InvoiceCreditNote.  # noqa: E501
        :rtype: str
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this InvoiceCreditNote.

        Refund transaction id if credit note has an associated refund  # noqa: E501

        :param transaction: The transaction of this InvoiceCreditNote.  # noqa: E501
        :type: str
        """

        self._transaction = transaction

    @property
    def credit(self):
        """Gets the credit of this InvoiceCreditNote.  # noqa: E501

        Credit reference if the credit note relates to a subscription credit  # noqa: E501

        :return: The credit of this InvoiceCreditNote.  # noqa: E501
        :rtype: str
        """
        return self._credit

    @credit.setter
    def credit(self, credit):
        """Sets the credit of this InvoiceCreditNote.

        Credit reference if the credit note relates to a subscription credit  # noqa: E501

        :param credit: The credit of this InvoiceCreditNote.  # noqa: E501
        :type: str
        """

        self._credit = credit

    @property
    def amount(self):
        """Gets the amount of this InvoiceCreditNote.  # noqa: E501

        Credit note amount  # noqa: E501

        :return: The amount of this InvoiceCreditNote.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InvoiceCreditNote.

        Credit note amount  # noqa: E501

        :param amount: The amount of this InvoiceCreditNote.  # noqa: E501
        :type: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def created(self):
        """Gets the created of this InvoiceCreditNote.  # noqa: E501

        Creation date for note, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :return: The created of this InvoiceCreditNote.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this InvoiceCreditNote.

        Creation date for note, in [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :param created: The created of this InvoiceCreditNote.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def credit_note_lines(self):
        """Gets the credit_note_lines of this InvoiceCreditNote.  # noqa: E501

        Credit note lines  # noqa: E501

        :return: The credit_note_lines of this InvoiceCreditNote.  # noqa: E501
        :rtype: list[CreditNoteLine]
        """
        return self._credit_note_lines

    @credit_note_lines.setter
    def credit_note_lines(self, credit_note_lines):
        """Sets the credit_note_lines of this InvoiceCreditNote.

        Credit note lines  # noqa: E501

        :param credit_note_lines: The credit_note_lines of this InvoiceCreditNote.  # noqa: E501
        :type: list[CreditNoteLine]
        """
        if credit_note_lines is None:
            raise ValueError("Invalid value for `credit_note_lines`, must not be `None`")  # noqa: E501

        self._credit_note_lines = credit_note_lines

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvoiceCreditNote, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        return (
            self.__dict__ == other.__dict__
            if isinstance(other, InvoiceCreditNote)
            else False
        )

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
