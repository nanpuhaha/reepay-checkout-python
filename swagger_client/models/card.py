# coding: utf-8

"""
    Reepay Checkout API

    Reepay Checkout REST API  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Card(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'state': 'str',
        'customer': 'str',
        'failed': 'datetime',
        'created': 'datetime',
        'fingerprint': 'str',
        'reactivated': 'datetime',
        'gw_ref': 'str',
        'card_type': 'str',
        'exp_date': 'str',
        'masked_card': 'str',
        'last_success': 'datetime',
        'last_failed': 'datetime',
        'first_fail': 'datetime',
        'error_code': 'str',
        'error_state': 'str',
        'strong_authentication_status': 'str'
    }

    attribute_map = {
        'id': 'id',
        'state': 'state',
        'customer': 'customer',
        'failed': 'failed',
        'created': 'created',
        'fingerprint': 'fingerprint',
        'reactivated': 'reactivated',
        'gw_ref': 'gw_ref',
        'card_type': 'card_type',
        'exp_date': 'exp_date',
        'masked_card': 'masked_card',
        'last_success': 'last_success',
        'last_failed': 'last_failed',
        'first_fail': 'first_fail',
        'error_code': 'error_code',
        'error_state': 'error_state',
        'strong_authentication_status': 'strong_authentication_status'
    }

    def __init__(self, id=None, state=None, customer=None, failed=None, created=None, fingerprint=None, reactivated=None, gw_ref=None, card_type=None, exp_date=None, masked_card=None, last_success=None, last_failed=None, first_fail=None, error_code=None, error_state=None, strong_authentication_status=None):  # noqa: E501
        """Card - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._state = None
        self._customer = None
        self._failed = None
        self._created = None
        self._fingerprint = None
        self._reactivated = None
        self._gw_ref = None
        self._card_type = None
        self._exp_date = None
        self._masked_card = None
        self._last_success = None
        self._last_failed = None
        self._first_fail = None
        self._error_code = None
        self._error_state = None
        self._strong_authentication_status = None
        self.discriminator = None

        self.id = id
        self.state = state
        self.customer = customer
        if failed is not None:
            self.failed = failed
        self.created = created
        if fingerprint is not None:
            self.fingerprint = fingerprint
        if reactivated is not None:
            self.reactivated = reactivated
        self.gw_ref = gw_ref
        self.card_type = card_type
        if exp_date is not None:
            self.exp_date = exp_date
        if masked_card is not None:
            self.masked_card = masked_card
        if last_success is not None:
            self.last_success = last_success
        if last_failed is not None:
            self.last_failed = last_failed
        if first_fail is not None:
            self.first_fail = first_fail
        if error_code is not None:
            self.error_code = error_code
        if error_state is not None:
            self.error_state = error_state
        if strong_authentication_status is not None:
            self.strong_authentication_status = strong_authentication_status

    @property
    def id(self):
        """Gets the id of this Card.  # noqa: E501

        Unique id for payment method  # noqa: E501

        :return: The id of this Card.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Card.

        Unique id for payment method  # noqa: E501

        :param id: The id of this Card.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def state(self):
        """Gets the state of this Card.  # noqa: E501

        State of the payment method: `active`, `inactivated`, `failed` or `deleted`  # noqa: E501

        :return: The state of this Card.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Card.

        State of the payment method: `active`, `inactivated`, `failed` or `deleted`  # noqa: E501

        :param state: The state of this Card.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["active", "inactivated", "failed", "deleted"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def customer(self):
        """Gets the customer of this Card.  # noqa: E501

        Customer by handle  # noqa: E501

        :return: The customer of this Card.  # noqa: E501
        :rtype: str
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this Card.

        Customer by handle  # noqa: E501

        :param customer: The customer of this Card.  # noqa: E501
        :type: str
        """
        if customer is None:
            raise ValueError("Invalid value for `customer`, must not be `None`")  # noqa: E501

        self._customer = customer

    @property
    def failed(self):
        """Gets the failed of this Card.  # noqa: E501

        Date when the payment method failed. In ISO-8601 extended offset date-time format.  # noqa: E501

        :return: The failed of this Card.  # noqa: E501
        :rtype: datetime
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this Card.

        Date when the payment method failed. In ISO-8601 extended offset date-time format.  # noqa: E501

        :param failed: The failed of this Card.  # noqa: E501
        :type: datetime
        """

        self._failed = failed

    @property
    def created(self):
        """Gets the created of this Card.  # noqa: E501

        Date when the payment method was created. In ISO-8601 extended offset date-time format.  # noqa: E501

        :return: The created of this Card.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Card.

        Date when the payment method was created. In ISO-8601 extended offset date-time format.  # noqa: E501

        :param created: The created of this Card.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def fingerprint(self):
        """Gets the fingerprint of this Card.  # noqa: E501

        Uniquely identifies this particular card number  # noqa: E501

        :return: The fingerprint of this Card.  # noqa: E501
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this Card.

        Uniquely identifies this particular card number  # noqa: E501

        :param fingerprint: The fingerprint of this Card.  # noqa: E501
        :type: str
        """

        self._fingerprint = fingerprint

    @property
    def reactivated(self):
        """Gets the reactivated of this Card.  # noqa: E501

        Date and time of reactivation if the card has been reactivated from failed state. In ISO-8601 extended offset date-time format.  # noqa: E501

        :return: The reactivated of this Card.  # noqa: E501
        :rtype: datetime
        """
        return self._reactivated

    @reactivated.setter
    def reactivated(self, reactivated):
        """Sets the reactivated of this Card.

        Date and time of reactivation if the card has been reactivated from failed state. In ISO-8601 extended offset date-time format.  # noqa: E501

        :param reactivated: The reactivated of this Card.  # noqa: E501
        :type: datetime
        """

        self._reactivated = reactivated

    @property
    def gw_ref(self):
        """Gets the gw_ref of this Card.  # noqa: E501

        Card gateway reference id  # noqa: E501

        :return: The gw_ref of this Card.  # noqa: E501
        :rtype: str
        """
        return self._gw_ref

    @gw_ref.setter
    def gw_ref(self, gw_ref):
        """Sets the gw_ref of this Card.

        Card gateway reference id  # noqa: E501

        :param gw_ref: The gw_ref of this Card.  # noqa: E501
        :type: str
        """
        if gw_ref is None:
            raise ValueError("Invalid value for `gw_ref`, must not be `None`")  # noqa: E501

        self._gw_ref = gw_ref

    @property
    def card_type(self):
        """Gets the card_type of this Card.  # noqa: E501

        Card type: `unknown`, `visa`, `mc`, `dankort`, `visa_dk`, `ffk`, `visa_elec`, `maestro`, `laser`, `amex`, `diners`, `discover` or `jcb`  # noqa: E501

        :return: The card_type of this Card.  # noqa: E501
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this Card.

        Card type: `unknown`, `visa`, `mc`, `dankort`, `visa_dk`, `ffk`, `visa_elec`, `maestro`, `laser`, `amex`, `diners`, `discover` or `jcb`  # noqa: E501

        :param card_type: The card_type of this Card.  # noqa: E501
        :type: str
        """
        if card_type is None:
            raise ValueError("Invalid value for `card_type`, must not be `None`")  # noqa: E501
        allowed_values = ["unknown", "visa", "mc", "dankort", "visa_dk", "ffk", "visa_elec", "maestro", "laser", "amex", "diners", "discover", "jcb"]  # noqa: E501
        if card_type not in allowed_values:
            raise ValueError(
                "Invalid value for `card_type` ({0}), must be one of {1}"  # noqa: E501
                .format(card_type, allowed_values)
            )

        self._card_type = card_type

    @property
    def exp_date(self):
        """Gets the exp_date of this Card.  # noqa: E501

        Card expire date on form MM-YY   # noqa: E501

        :return: The exp_date of this Card.  # noqa: E501
        :rtype: str
        """
        return self._exp_date

    @exp_date.setter
    def exp_date(self, exp_date):
        """Sets the exp_date of this Card.

        Card expire date on form MM-YY   # noqa: E501

        :param exp_date: The exp_date of this Card.  # noqa: E501
        :type: str
        """

        self._exp_date = exp_date

    @property
    def masked_card(self):
        """Gets the masked_card of this Card.  # noqa: E501

        Masked card number  # noqa: E501

        :return: The masked_card of this Card.  # noqa: E501
        :rtype: str
        """
        return self._masked_card

    @masked_card.setter
    def masked_card(self, masked_card):
        """Sets the masked_card of this Card.

        Masked card number  # noqa: E501

        :param masked_card: The masked_card of this Card.  # noqa: E501
        :type: str
        """

        self._masked_card = masked_card

    @property
    def last_success(self):
        """Gets the last_success of this Card.  # noqa: E501

        Date and time of last succesfull use of the card. In ISO-8601 extended offset date-time format.  # noqa: E501

        :return: The last_success of this Card.  # noqa: E501
        :rtype: datetime
        """
        return self._last_success

    @last_success.setter
    def last_success(self, last_success):
        """Sets the last_success of this Card.

        Date and time of last succesfull use of the card. In ISO-8601 extended offset date-time format.  # noqa: E501

        :param last_success: The last_success of this Card.  # noqa: E501
        :type: datetime
        """

        self._last_success = last_success

    @property
    def last_failed(self):
        """Gets the last_failed of this Card.  # noqa: E501

        Date and time of last failed use of the card. In ISO-8601 extended offset date-time format.  # noqa: E501

        :return: The last_failed of this Card.  # noqa: E501
        :rtype: datetime
        """
        return self._last_failed

    @last_failed.setter
    def last_failed(self, last_failed):
        """Sets the last_failed of this Card.

        Date and time of last failed use of the card. In ISO-8601 extended offset date-time format.  # noqa: E501

        :param last_failed: The last_failed of this Card.  # noqa: E501
        :type: datetime
        """

        self._last_failed = last_failed

    @property
    def first_fail(self):
        """Gets the first_fail of this Card.  # noqa: E501

        Date and time of first succesfull use of the card. In ISO-8601 extended offset date-time format.  # noqa: E501

        :return: The first_fail of this Card.  # noqa: E501
        :rtype: datetime
        """
        return self._first_fail

    @first_fail.setter
    def first_fail(self, first_fail):
        """Sets the first_fail of this Card.

        Date and time of first succesfull use of the card. In ISO-8601 extended offset date-time format.  # noqa: E501

        :param first_fail: The first_fail of this Card.  # noqa: E501
        :type: datetime
        """

        self._first_fail = first_fail

    @property
    def error_code(self):
        """Gets the error_code of this Card.  # noqa: E501

        An error code from the last failed use of the card. See [transaction errors](https://reference.reepay.com/api/#transaction-errors).  # noqa: E501

        :return: The error_code of this Card.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this Card.

        An error code from the last failed use of the card. See [transaction errors](https://reference.reepay.com/api/#transaction-errors).  # noqa: E501

        :param error_code: The error_code of this Card.  # noqa: E501
        :type: str
        """

        self._error_code = error_code

    @property
    def error_state(self):
        """Gets the error_state of this Card.  # noqa: E501

        Error state from last failed use of the card: `pending`, `soft_declined`, `hard_declined` or `processing_error`  # noqa: E501

        :return: The error_state of this Card.  # noqa: E501
        :rtype: str
        """
        return self._error_state

    @error_state.setter
    def error_state(self, error_state):
        """Sets the error_state of this Card.

        Error state from last failed use of the card: `pending`, `soft_declined`, `hard_declined` or `processing_error`  # noqa: E501

        :param error_state: The error_state of this Card.  # noqa: E501
        :type: str
        """
        allowed_values = ["pending", "soft_declined", "hard_declined", "processing_error"]  # noqa: E501
        if error_state not in allowed_values:
            raise ValueError(
                "Invalid value for `error_state` ({0}), must be one of {1}"  # noqa: E501
                .format(error_state, allowed_values)
            )

        self._error_state = error_state

    @property
    def strong_authentication_status(self):
        """Gets the strong_authentication_status of this Card.  # noqa: E501

        Status for strong customer authentication  # noqa: E501

        :return: The strong_authentication_status of this Card.  # noqa: E501
        :rtype: str
        """
        return self._strong_authentication_status

    @strong_authentication_status.setter
    def strong_authentication_status(self, strong_authentication_status):
        """Sets the strong_authentication_status of this Card.

        Status for strong customer authentication  # noqa: E501

        :param strong_authentication_status: The strong_authentication_status of this Card.  # noqa: E501
        :type: str
        """
        allowed_values = ["threed_secure", "threed_secure_not_enrolled", "threed_secure_local_only", "secured_by_nets"]  # noqa: E501
        if strong_authentication_status not in allowed_values:
            raise ValueError(
                "Invalid value for `strong_authentication_status` ({0}), must be one of {1}"  # noqa: E501
                .format(strong_authentication_status, allowed_values)
            )

        self._strong_authentication_status = strong_authentication_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Card, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        return self.__dict__ == other.__dict__ if isinstance(other, Card) else False

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
