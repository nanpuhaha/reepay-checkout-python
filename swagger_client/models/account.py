# coding: utf-8

"""
    Reepay Checkout API

    Reepay Checkout REST API  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Account(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'handle': 'str',
        'currency': 'str',
        'name': 'str',
        'address': 'str',
        'address2': 'str',
        'city': 'str',
        'locale': 'str',
        'timezone': 'str',
        'country': 'str',
        'email': 'str',
        'phone': 'str',
        'vat': 'str',
        'website': 'str',
        'logo': 'str',
        'id': 'str',
        'organisation': 'str',
        'created': 'datetime',
        'state': 'str',
        'postal_code': 'str',
        'default_vat': 'float',
        'subscription_invoice_prefix': 'str'
    }

    attribute_map = {
        'handle': 'handle',
        'currency': 'currency',
        'name': 'name',
        'address': 'address',
        'address2': 'address2',
        'city': 'city',
        'locale': 'locale',
        'timezone': 'timezone',
        'country': 'country',
        'email': 'email',
        'phone': 'phone',
        'vat': 'vat',
        'website': 'website',
        'logo': 'logo',
        'id': 'id',
        'organisation': 'organisation',
        'created': 'created',
        'state': 'state',
        'postal_code': 'postal_code',
        'default_vat': 'default_vat',
        'subscription_invoice_prefix': 'subscription_invoice_prefix'
    }

    def __init__(self, handle=None, currency=None, name=None, address=None, address2=None, city=None, locale=None, timezone=None, country=None, email=None, phone=None, vat=None, website=None, logo=None, id=None, organisation=None, created=None, state=None, postal_code=None, default_vat=None, subscription_invoice_prefix=None):  # noqa: E501
        """Account - a model defined in Swagger"""  # noqa: E501

        self._handle = None
        self._currency = None
        self._name = None
        self._address = None
        self._address2 = None
        self._city = None
        self._locale = None
        self._timezone = None
        self._country = None
        self._email = None
        self._phone = None
        self._vat = None
        self._website = None
        self._logo = None
        self._id = None
        self._organisation = None
        self._created = None
        self._state = None
        self._postal_code = None
        self._default_vat = None
        self._subscription_invoice_prefix = None
        self.discriminator = None

        self.handle = handle
        self.currency = currency
        self.name = name
        if address is not None:
            self.address = address
        if address2 is not None:
            self.address2 = address2
        if city is not None:
            self.city = city
        self.locale = locale
        self.timezone = timezone
        self.country = country
        if email is not None:
            self.email = email
        if phone is not None:
            self.phone = phone
        if vat is not None:
            self.vat = vat
        if website is not None:
            self.website = website
        if logo is not None:
            self.logo = logo
        self.id = id
        self.organisation = organisation
        self.created = created
        self.state = state
        if postal_code is not None:
            self.postal_code = postal_code
        self.default_vat = default_vat
        if subscription_invoice_prefix is not None:
            self.subscription_invoice_prefix = subscription_invoice_prefix

    @property
    def handle(self):
        """Gets the handle of this Account.  # noqa: E501

        Per organisation unique handle for the account  # noqa: E501

        :return: The handle of this Account.  # noqa: E501
        :rtype: str
        """
        return self._handle

    @handle.setter
    def handle(self, handle):
        """Sets the handle of this Account.

        Per organisation unique handle for the account  # noqa: E501

        :param handle: The handle of this Account.  # noqa: E501
        :type: str
        """
        if handle is None:
            raise ValueError("Invalid value for `handle`, must not be `None`")  # noqa: E501

        self._handle = handle

    @property
    def currency(self):
        """Gets the currency of this Account.  # noqa: E501

        Currency for the account in [ISO 4217](http://da.wikipedia.org/wiki/ISO_4217) three letter alpha code  # noqa: E501

        :return: The currency of this Account.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Account.

        Currency for the account in [ISO 4217](http://da.wikipedia.org/wiki/ISO_4217) three letter alpha code  # noqa: E501

        :param currency: The currency of this Account.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def name(self):
        """Gets the name of this Account.  # noqa: E501

        Account name  # noqa: E501

        :return: The name of this Account.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Account.

        Account name  # noqa: E501

        :param name: The name of this Account.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def address(self):
        """Gets the address of this Account.  # noqa: E501

        Account address  # noqa: E501

        :return: The address of this Account.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Account.

        Account address  # noqa: E501

        :param address: The address of this Account.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def address2(self):
        """Gets the address2 of this Account.  # noqa: E501

        Account address2  # noqa: E501

        :return: The address2 of this Account.  # noqa: E501
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this Account.

        Account address2  # noqa: E501

        :param address2: The address2 of this Account.  # noqa: E501
        :type: str
        """

        self._address2 = address2

    @property
    def city(self):
        """Gets the city of this Account.  # noqa: E501

        Account city  # noqa: E501

        :return: The city of this Account.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Account.

        Account city  # noqa: E501

        :param city: The city of this Account.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def locale(self):
        """Gets the locale of this Account.  # noqa: E501

        Account locale on the form 'language_country'  # noqa: E501

        :return: The locale of this Account.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this Account.

        Account locale on the form 'language_country'  # noqa: E501

        :param locale: The locale of this Account.  # noqa: E501
        :type: str
        """
        if locale is None:
            raise ValueError("Invalid value for `locale`, must not be `None`")  # noqa: E501

        self._locale = locale

    @property
    def timezone(self):
        """Gets the timezone of this Account.  # noqa: E501

        Account time zone ID as abbreviation or full name. See [Wikipedia](http://en.wikipedia.org/wiki/List_of_tz_database_time_zones)  # noqa: E501

        :return: The timezone of this Account.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Account.

        Account time zone ID as abbreviation or full name. See [Wikipedia](http://en.wikipedia.org/wiki/List_of_tz_database_time_zones)  # noqa: E501

        :param timezone: The timezone of this Account.  # noqa: E501
        :type: str
        """
        if timezone is None:
            raise ValueError("Invalid value for `timezone`, must not be `None`")  # noqa: E501

        self._timezone = timezone

    @property
    def country(self):
        """Gets the country of this Account.  # noqa: E501

        Account country in [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)  # noqa: E501

        :return: The country of this Account.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Account.

        Account country in [ISO 3166-1 alpha-2](http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)  # noqa: E501

        :param country: The country of this Account.  # noqa: E501
        :type: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country

    @property
    def email(self):
        """Gets the email of this Account.  # noqa: E501

        Account email  # noqa: E501

        :return: The email of this Account.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Account.

        Account email  # noqa: E501

        :param email: The email of this Account.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this Account.  # noqa: E501

        Account phone  # noqa: E501

        :return: The phone of this Account.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Account.

        Account phone  # noqa: E501

        :param phone: The phone of this Account.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def vat(self):
        """Gets the vat of this Account.  # noqa: E501

        Account vat number  # noqa: E501

        :return: The vat of this Account.  # noqa: E501
        :rtype: str
        """
        return self._vat

    @vat.setter
    def vat(self, vat):
        """Sets the vat of this Account.

        Account vat number  # noqa: E501

        :param vat: The vat of this Account.  # noqa: E501
        :type: str
        """

        self._vat = vat

    @property
    def website(self):
        """Gets the website of this Account.  # noqa: E501

        Account website  # noqa: E501

        :return: The website of this Account.  # noqa: E501
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Account.

        Account website  # noqa: E501

        :param website: The website of this Account.  # noqa: E501
        :type: str
        """

        self._website = website

    @property
    def logo(self):
        """Gets the logo of this Account.  # noqa: E501

        Account logo url  # noqa: E501

        :return: The logo of this Account.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this Account.

        Account logo url  # noqa: E501

        :param logo: The logo of this Account.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def id(self):
        """Gets the id of this Account.  # noqa: E501

        Account id assigned by Reepay  # noqa: E501

        :return: The id of this Account.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.

        Account id assigned by Reepay  # noqa: E501

        :param id: The id of this Account.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def organisation(self):
        """Gets the organisation of this Account.  # noqa: E501

        Organisation by subdomain  # noqa: E501

        :return: The organisation of this Account.  # noqa: E501
        :rtype: str
        """
        return self._organisation

    @organisation.setter
    def organisation(self, organisation):
        """Sets the organisation of this Account.

        Organisation by subdomain  # noqa: E501

        :param organisation: The organisation of this Account.  # noqa: E501
        :type: str
        """
        if organisation is None:
            raise ValueError("Invalid value for `organisation`, must not be `None`")  # noqa: E501

        self._organisation = organisation

    @property
    def created(self):
        """Gets the created of this Account.  # noqa: E501

        Date when the account was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :return: The created of this Account.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Account.

        Date when the account was created. In [ISO-8601](http://en.wikipedia.org/wiki/ISO_8601) extended offset date-time format.  # noqa: E501

        :param created: The created of this Account.  # noqa: E501
        :type: datetime
        """
        if created is None:
            raise ValueError("Invalid value for `created`, must not be `None`")  # noqa: E501

        self._created = created

    @property
    def state(self):
        """Gets the state of this Account.  # noqa: E501

        Status of the account one of the following `test`, `live`, `closed`.  # noqa: E501

        :return: The state of this Account.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Account.

        Status of the account one of the following `test`, `live`, `closed`.  # noqa: E501

        :param state: The state of this Account.  # noqa: E501
        :type: str
        """
        if state is None:
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501
        allowed_values = ["test", "live", "closed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def postal_code(self):
        """Gets the postal_code of this Account.  # noqa: E501

        Account postal code  # noqa: E501

        :return: The postal_code of this Account.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Account.

        Account postal code  # noqa: E501

        :param postal_code: The postal_code of this Account.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def default_vat(self):
        """Gets the default_vat of this Account.  # noqa: E501

        Default vat for account  # noqa: E501

        :return: The default_vat of this Account.  # noqa: E501
        :rtype: float
        """
        return self._default_vat

    @default_vat.setter
    def default_vat(self, default_vat):
        """Sets the default_vat of this Account.

        Default vat for account  # noqa: E501

        :param default_vat: The default_vat of this Account.  # noqa: E501
        :type: float
        """
        if default_vat is None:
            raise ValueError("Invalid value for `default_vat`, must not be `None`")  # noqa: E501
        if default_vat is not None and default_vat > 1:  # noqa: E501
            raise ValueError("Invalid value for `default_vat`, must be a value less than or equal to `1`")  # noqa: E501
        if default_vat is not None and default_vat < 0:  # noqa: E501
            raise ValueError("Invalid value for `default_vat`, must be a value greater than or equal to `0`")  # noqa: E501

        self._default_vat = default_vat

    @property
    def subscription_invoice_prefix(self):
        """Gets the subscription_invoice_prefix of this Account.  # noqa: E501


        :return: The subscription_invoice_prefix of this Account.  # noqa: E501
        :rtype: str
        """
        return self._subscription_invoice_prefix

    @subscription_invoice_prefix.setter
    def subscription_invoice_prefix(self, subscription_invoice_prefix):
        """Sets the subscription_invoice_prefix of this Account.


        :param subscription_invoice_prefix: The subscription_invoice_prefix of this Account.  # noqa: E501
        :type: str
        """

        self._subscription_invoice_prefix = subscription_invoice_prefix

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Account, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Account):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
