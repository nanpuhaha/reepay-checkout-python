# coding: utf-8

"""
    Reepay Checkout API

    Reepay Checkout REST API  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Order(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'handle': 'str',
        'key': 'str',
        'amount': 'int',
        'currency': 'str',
        'customer': 'CreateCustomer',
        'metadata': 'dict(str, object)',
        'ordertext': 'str',
        'order_lines': 'list[CreateOrderLine]',
        'customer_handle': 'str',
        'billing_address': 'InvoiceBillingAddress',
        'shipping_address': 'InvoiceShippingAddress'
    }

    attribute_map = {
        'handle': 'handle',
        'key': 'key',
        'amount': 'amount',
        'currency': 'currency',
        'customer': 'customer',
        'metadata': 'metadata',
        'ordertext': 'ordertext',
        'order_lines': 'order_lines',
        'customer_handle': 'customer_handle',
        'billing_address': 'billing_address',
        'shipping_address': 'shipping_address'
    }

    def __init__(self, handle=None, key=None, amount=None, currency=None, customer=None, metadata=None, ordertext=None, order_lines=None, customer_handle=None, billing_address=None, shipping_address=None):  # noqa: E501
        """Order - a model defined in Swagger"""  # noqa: E501

        self._handle = None
        self._key = None
        self._amount = None
        self._currency = None
        self._customer = None
        self._metadata = None
        self._ordertext = None
        self._order_lines = None
        self._customer_handle = None
        self._billing_address = None
        self._shipping_address = None
        self.discriminator = None

        self.handle = handle
        if key is not None:
            self.key = key
        if amount is not None:
            self.amount = amount
        if currency is not None:
            self.currency = currency
        if customer is not None:
            self.customer = customer
        if metadata is not None:
            self.metadata = metadata
        if ordertext is not None:
            self.ordertext = ordertext
        if order_lines is not None:
            self.order_lines = order_lines
        if customer_handle is not None:
            self.customer_handle = customer_handle
        if billing_address is not None:
            self.billing_address = billing_address
        if shipping_address is not None:
            self.shipping_address = shipping_address

    @property
    def handle(self):
        """Gets the handle of this Order.  # noqa: E501

        Per account unique reference to charge/invoice. E.g. order id from own system. Multiple payments can be attempted for the same handle but only one authorized or settled charge can exist per handle. Max length 255 with allowable characters [a-zA-Z0-9_.-@]. It is recommended to use a maximum of 20 characters as this will allow for the use of handle as reference on bank statements without truncation.  # noqa: E501

        :return: The handle of this Order.  # noqa: E501
        :rtype: str
        """
        return self._handle

    @handle.setter
    def handle(self, handle):
        """Sets the handle of this Order.

        Per account unique reference to charge/invoice. E.g. order id from own system. Multiple payments can be attempted for the same handle but only one authorized or settled charge can exist per handle. Max length 255 with allowable characters [a-zA-Z0-9_.-@]. It is recommended to use a maximum of 20 characters as this will allow for the use of handle as reference on bank statements without truncation.  # noqa: E501

        :param handle: The handle of this Order.  # noqa: E501
        :type: str
        """
        if handle is None:
            raise ValueError("Invalid value for `handle`, must not be `None`")  # noqa: E501

        self._handle = handle

    @property
    def key(self):
        """Gets the key of this Order.  # noqa: E501

        Optional idempotency key. Only one authorization or settle can be performed for the same handle. If two create attempts are attempted and the first succeeds the second will fail because charge is already settled or authorized. An idempotency key identifies uniquely the request and multiple requests with the same key and handle will yield the same result. In case of networking errors the same request with same key can safely be retried.  # noqa: E501

        :return: The key of this Order.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Order.

        Optional idempotency key. Only one authorization or settle can be performed for the same handle. If two create attempts are attempted and the first succeeds the second will fail because charge is already settled or authorized. An idempotency key identifies uniquely the request and multiple requests with the same key and handle will yield the same result. In case of networking errors the same request with same key can safely be retried.  # noqa: E501

        :param key: The key of this Order.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def amount(self):
        """Gets the amount of this Order.  # noqa: E501

        Amount in the smallest unit for the account currency. Either `amount` or `order_lines` must be provided if charge/invoice does not already exists.  # noqa: E501

        :return: The amount of this Order.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Order.

        Amount in the smallest unit for the account currency. Either `amount` or `order_lines` must be provided if charge/invoice does not already exists.  # noqa: E501

        :param amount: The amount of this Order.  # noqa: E501
        :type: int
        """
        if amount is not None and amount < 1:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must be a value greater than or equal to `1`")  # noqa: E501

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this Order.  # noqa: E501

        Optional currency in [ISO 4217](http://da.wikipedia.org/wiki/ISO_4217) three letter alpha code. If not provided the account default currency will be used. The currency of an existing charge or invoice cannot be changed.  # noqa: E501

        :return: The currency of this Order.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Order.

        Optional currency in [ISO 4217](http://da.wikipedia.org/wiki/ISO_4217) three letter alpha code. If not provided the account default currency will be used. The currency of an existing charge or invoice cannot be changed.  # noqa: E501

        :param currency: The currency of this Order.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def customer(self):
        """Gets the customer of this Order.  # noqa: E501

        Optional create customer object. An alternative to using a reference to an already created customer either by the `customer_handle` parameter or implicitly given if using a saved payment method as source. If this object is provided and the customer already exists, the existing customer will be used. Notice that customer cannot be changed for existing charge/invoice so if handle is provided it must match the customer handle for existing customer.  # noqa: E501

        :return: The customer of this Order.  # noqa: E501
        :rtype: CreateCustomer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this Order.

        Optional create customer object. An alternative to using a reference to an already created customer either by the `customer_handle` parameter or implicitly given if using a saved payment method as source. If this object is provided and the customer already exists, the existing customer will be used. Notice that customer cannot be changed for existing charge/invoice so if handle is provided it must match the customer handle for existing customer.  # noqa: E501

        :param customer: The customer of this Order.  # noqa: E501
        :type: CreateCustomer
        """

        self._customer = customer

    @property
    def metadata(self):
        """Gets the metadata of this Order.  # noqa: E501

        Custom metadata.  # noqa: E501

        :return: The metadata of this Order.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Order.

        Custom metadata.  # noqa: E501

        :param metadata: The metadata of this Order.  # noqa: E501
        :type: dict(str, object)
        """

        self._metadata = metadata

    @property
    def ordertext(self):
        """Gets the ordertext of this Order.  # noqa: E501

        Optional order text. Used in conjunction with `amount`. Ignored if `order_lines` is provided.  # noqa: E501

        :return: The ordertext of this Order.  # noqa: E501
        :rtype: str
        """
        return self._ordertext

    @ordertext.setter
    def ordertext(self, ordertext):
        """Sets the ordertext of this Order.

        Optional order text. Used in conjunction with `amount`. Ignored if `order_lines` is provided.  # noqa: E501

        :param ordertext: The ordertext of this Order.  # noqa: E501
        :type: str
        """

        self._ordertext = ordertext

    @property
    def order_lines(self):
        """Gets the order_lines of this Order.  # noqa: E501

        Order lines for the charge. The order lines controls the amount. Only required if charge/invoice does not already exist. If given for existing charge the order lines and amount are adjusted.  # noqa: E501

        :return: The order_lines of this Order.  # noqa: E501
        :rtype: list[CreateOrderLine]
        """
        return self._order_lines

    @order_lines.setter
    def order_lines(self, order_lines):
        """Sets the order_lines of this Order.

        Order lines for the charge. The order lines controls the amount. Only required if charge/invoice does not already exist. If given for existing charge the order lines and amount are adjusted.  # noqa: E501

        :param order_lines: The order_lines of this Order.  # noqa: E501
        :type: list[CreateOrderLine]
        """

        self._order_lines = order_lines

    @property
    def customer_handle(self):
        """Gets the customer_handle of this Order.  # noqa: E501

        Customer reference. If charge does not already exist either this reference must be provided, a create customer object must be provided or the source must be a payment method reference (e.g. `ca_..`) identifying customer. Notice that customer cannot be changed for existing charge/invoice so if handle is provided it must match the customer handle for existing customer.  # noqa: E501

        :return: The customer_handle of this Order.  # noqa: E501
        :rtype: str
        """
        return self._customer_handle

    @customer_handle.setter
    def customer_handle(self, customer_handle):
        """Sets the customer_handle of this Order.

        Customer reference. If charge does not already exist either this reference must be provided, a create customer object must be provided or the source must be a payment method reference (e.g. `ca_..`) identifying customer. Notice that customer cannot be changed for existing charge/invoice so if handle is provided it must match the customer handle for existing customer.  # noqa: E501

        :param customer_handle: The customer_handle of this Order.  # noqa: E501
        :type: str
        """

        self._customer_handle = customer_handle

    @property
    def billing_address(self):
        """Gets the billing_address of this Order.  # noqa: E501

        Optional billing address  # noqa: E501

        :return: The billing_address of this Order.  # noqa: E501
        :rtype: InvoiceBillingAddress
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this Order.

        Optional billing address  # noqa: E501

        :param billing_address: The billing_address of this Order.  # noqa: E501
        :type: InvoiceBillingAddress
        """

        self._billing_address = billing_address

    @property
    def shipping_address(self):
        """Gets the shipping_address of this Order.  # noqa: E501

        Optional shipping address  # noqa: E501

        :return: The shipping_address of this Order.  # noqa: E501
        :rtype: InvoiceShippingAddress
        """
        return self._shipping_address

    @shipping_address.setter
    def shipping_address(self, shipping_address):
        """Sets the shipping_address of this Order.

        Optional shipping address  # noqa: E501

        :param shipping_address: The shipping_address of this Order.  # noqa: E501
        :type: InvoiceShippingAddress
        """

        self._shipping_address = shipping_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Order, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Order):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
