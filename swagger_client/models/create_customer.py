# coding: utf-8

"""
    Reepay Checkout API

    Reepay Checkout REST API  # noqa: E501

    OpenAPI spec version: 1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CreateCustomer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'address': 'str',
        'address2': 'str',
        'city': 'str',
        'country': 'str',
        'phone': 'str',
        'company': 'str',
        'vat': 'str',
        'handle': 'str',
        'test': 'bool',
        'metadata': 'dict(str, object)',
        'first_name': 'str',
        'last_name': 'str',
        'postal_code': 'str',
        'generate_handle': 'bool'
    }

    attribute_map = {
        'email': 'email',
        'address': 'address',
        'address2': 'address2',
        'city': 'city',
        'country': 'country',
        'phone': 'phone',
        'company': 'company',
        'vat': 'vat',
        'handle': 'handle',
        'test': 'test',
        'metadata': 'metadata',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'postal_code': 'postal_code',
        'generate_handle': 'generate_handle'
    }

    def __init__(self, email=None, address=None, address2=None, city=None, country=None, phone=None, company=None, vat=None, handle=None, test=None, metadata=None, first_name=None, last_name=None, postal_code=None, generate_handle=None):  # noqa: E501
        """CreateCustomer - a model defined in Swagger"""  # noqa: E501

        self._email = None
        self._address = None
        self._address2 = None
        self._city = None
        self._country = None
        self._phone = None
        self._company = None
        self._vat = None
        self._handle = None
        self._test = None
        self._metadata = None
        self._first_name = None
        self._last_name = None
        self._postal_code = None
        self._generate_handle = None
        self.discriminator = None

        if email is not None:
            self.email = email
        if address is not None:
            self.address = address
        if address2 is not None:
            self.address2 = address2
        if city is not None:
            self.city = city
        if country is not None:
            self.country = country
        if phone is not None:
            self.phone = phone
        if company is not None:
            self.company = company
        if vat is not None:
            self.vat = vat
        if handle is not None:
            self.handle = handle
        if test is not None:
            self.test = test
        if metadata is not None:
            self.metadata = metadata
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if postal_code is not None:
            self.postal_code = postal_code
        if generate_handle is not None:
            self.generate_handle = generate_handle

    @property
    def email(self):
        """Gets the email of this CreateCustomer.  # noqa: E501

        Customer email  # noqa: E501

        :return: The email of this CreateCustomer.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CreateCustomer.

        Customer email  # noqa: E501

        :param email: The email of this CreateCustomer.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def address(self):
        """Gets the address of this CreateCustomer.  # noqa: E501

        Customer address  # noqa: E501

        :return: The address of this CreateCustomer.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this CreateCustomer.

        Customer address  # noqa: E501

        :param address: The address of this CreateCustomer.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def address2(self):
        """Gets the address2 of this CreateCustomer.  # noqa: E501

        Customer address2  # noqa: E501

        :return: The address2 of this CreateCustomer.  # noqa: E501
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this CreateCustomer.

        Customer address2  # noqa: E501

        :param address2: The address2 of this CreateCustomer.  # noqa: E501
        :type: str
        """

        self._address2 = address2

    @property
    def city(self):
        """Gets the city of this CreateCustomer.  # noqa: E501

        Customer city  # noqa: E501

        :return: The city of this CreateCustomer.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this CreateCustomer.

        Customer city  # noqa: E501

        :param city: The city of this CreateCustomer.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this CreateCustomer.  # noqa: E501

        Customer country in ISO 3166-1 alpha-2  # noqa: E501

        :return: The country of this CreateCustomer.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CreateCustomer.

        Customer country in ISO 3166-1 alpha-2  # noqa: E501

        :param country: The country of this CreateCustomer.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def phone(self):
        """Gets the phone of this CreateCustomer.  # noqa: E501

        Customer phone number  # noqa: E501

        :return: The phone of this CreateCustomer.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this CreateCustomer.

        Customer phone number  # noqa: E501

        :param phone: The phone of this CreateCustomer.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def company(self):
        """Gets the company of this CreateCustomer.  # noqa: E501

        Customer company  # noqa: E501

        :return: The company of this CreateCustomer.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this CreateCustomer.

        Customer company  # noqa: E501

        :param company: The company of this CreateCustomer.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def vat(self):
        """Gets the vat of this CreateCustomer.  # noqa: E501

        Customer vat number  # noqa: E501

        :return: The vat of this CreateCustomer.  # noqa: E501
        :rtype: str
        """
        return self._vat

    @vat.setter
    def vat(self, vat):
        """Sets the vat of this CreateCustomer.

        Customer vat number  # noqa: E501

        :param vat: The vat of this CreateCustomer.  # noqa: E501
        :type: str
        """

        self._vat = vat

    @property
    def handle(self):
        """Gets the handle of this CreateCustomer.  # noqa: E501

        Per account unique handle for the customer. Max length 255 with allowable characters [a-zA-Z0-9_.-@]. Must be provided if generate_handle is not defined.  # noqa: E501

        :return: The handle of this CreateCustomer.  # noqa: E501
        :rtype: str
        """
        return self._handle

    @handle.setter
    def handle(self, handle):
        """Sets the handle of this CreateCustomer.

        Per account unique handle for the customer. Max length 255 with allowable characters [a-zA-Z0-9_.-@]. Must be provided if generate_handle is not defined.  # noqa: E501

        :param handle: The handle of this CreateCustomer.  # noqa: E501
        :type: str
        """

        self._handle = handle

    @property
    def test(self):
        """Gets the test of this CreateCustomer.  # noqa: E501

        Test flag. If given it will be verified that the account state matches the intended create state.  # noqa: E501

        :return: The test of this CreateCustomer.  # noqa: E501
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this CreateCustomer.

        Test flag. If given it will be verified that the account state matches the intended create state.  # noqa: E501

        :param test: The test of this CreateCustomer.  # noqa: E501
        :type: bool
        """

        self._test = test

    @property
    def metadata(self):
        """Gets the metadata of this CreateCustomer.  # noqa: E501

        Custom metadata.  # noqa: E501

        :return: The metadata of this CreateCustomer.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CreateCustomer.

        Custom metadata.  # noqa: E501

        :param metadata: The metadata of this CreateCustomer.  # noqa: E501
        :type: dict(str, object)
        """

        self._metadata = metadata

    @property
    def first_name(self):
        """Gets the first_name of this CreateCustomer.  # noqa: E501

        Customer first name  # noqa: E501

        :return: The first_name of this CreateCustomer.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CreateCustomer.

        Customer first name  # noqa: E501

        :param first_name: The first_name of this CreateCustomer.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this CreateCustomer.  # noqa: E501

        Customer last name  # noqa: E501

        :return: The last_name of this CreateCustomer.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CreateCustomer.

        Customer last name  # noqa: E501

        :param last_name: The last_name of this CreateCustomer.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def postal_code(self):
        """Gets the postal_code of this CreateCustomer.  # noqa: E501

        Customer postal code  # noqa: E501

        :return: The postal_code of this CreateCustomer.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this CreateCustomer.

        Customer postal code  # noqa: E501

        :param postal_code: The postal_code of this CreateCustomer.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def generate_handle(self):
        """Gets the generate_handle of this CreateCustomer.  # noqa: E501

        Auto generate handle on the form cust-[sequence_number]  # noqa: E501

        :return: The generate_handle of this CreateCustomer.  # noqa: E501
        :rtype: bool
        """
        return self._generate_handle

    @generate_handle.setter
    def generate_handle(self, generate_handle):
        """Sets the generate_handle of this CreateCustomer.

        Auto generate handle on the form cust-[sequence_number]  # noqa: E501

        :param generate_handle: The generate_handle of this CreateCustomer.  # noqa: E501
        :type: bool
        """

        self._generate_handle = generate_handle

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateCustomer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateCustomer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
